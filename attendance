#!/bin/bash
#trap "rm -vf this.* hosts.json cadaver.put " EXIT
set -e
thisDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
thisAuth=$(python3 $thisDir/get.auth.py)
tmp=~/tmp/meetings
mkdir -p "$tmp"
trackingField=Course
keepDetail=false
msg()
{
    if [  "$verbose" = true ];
    then
	msgString=$*
	echo "%% $msgString"
    fi
}

getHosts()
{
    hostList=$tmp/hosts.list
    :>$hostList
    msg "Getting hosts"
    curl -s --location --request GET 'https://api.zoom.us/v2/users?status=active&page_size=30' \
	 --header 'Authorization: Bearer '"$thisAuth" -o hosts.json
	jq -r '.users[] | select(.type == 2)  | .id' hosts.json > $hostList
    msg "Got hosts"
}

getMeetings()
{
    retrieveType="scheduled"
    getHosts # returns $hostList
    while IFS='' read -r thisHost ; do
	msg "Working on meetings for $thisHost"
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/users/'"$thisHost"'/meetings?page_size=300&type='$retrieveType \
	     --header 'Authorization: Bearer '"$thisAuth" -o "$tmp"/"$thisHost".info.json 
    done < $hostList
    jq --slurp ' .[] | .meetings[].id' "$tmp"/*info.json  > "$tmp"/all.meetings.list
    sort --unique > "$tmp"/meetings.list < "$tmp"/all.meetings.list
}
meetingBasics()
{
    msg "Working on \$trackingField $trackingField"
    msg "Initializing $cmd.list"
    rptTypeList=$tmp/this.list
    :>"$rptTypeList"
    getMeetings
    showAll="?show_previous_occurrences=true"
    while IFS='' read -r thisMtg ; do
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/meetings/'"$thisMtg"$showAll\
	     --header 'Authorization: Bearer '"$thisAuth"\
	     -o "$tmp"/"$thisMtg".details.json 
	gotItem=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.type.jq "$tmp"/"$thisMtg".details.json)
	if [[ $gotItem = "" ]];
	   then 
	    if [[ $keepDetail = true ]]; then
		# Leaving next line for debugging purposes
    		mv "$tmp"/"$thisMtg".details.json  "$tmp"/"$thisMtg".nope.json
	    else
		rm "$tmp"/"$thisMtg".details.json
	    fi
	else
	    gotTopic=$(jq  --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.topic.jq  "$tmp"/"$thisMtg".details.json)
	    getInstances "$gotItem"
	fi
    done < "$tmp"/meetings.list
    gThisList=$rptTypeList
}
getInstances()
{

    thisInstance=$1
    curl -s --location --request GET \
	 'https://api.zoom.us/v2/past_meetings/'"$thisInstance"/instances\
	 --header 'Authorization: Bearer '"$thisAuth" -o $thisInstance.instance.json
    #    array=$(jq -r '[.meetings[].uuid] | @tsv'  $thisInstance.instance.json)
    jq -r '.meetings[] | [.uuid, .start_time] | @csv' $thisInstance.instance.json > $thisInstance.csv
    ### TODO need to loop through the contents of this .csv file
    awk -F "\"*,"\" '{print $1}' $thisInstance.csv | dblEncode | echo "Got  $other"
    exit
#    fetchInstance $other
}
dblEncode()
{
    while read -r data; do
    echo $data
    that=$(urlencode $data)
    echo $that
    other=$(urlencode $that)
    echo $other
     done
}

fetchInstance()
{
    thisInstance=$1
    echo "Got $thisInstance"
    curl -s --location --request GET \
	 'https://api.zoom.us/v2/past_meetings/'"$thisInstance"/participants?page_size=100\
	 --header 'Authorization: Bearer '"$thisAuth" -o $tmp/$thisInstance.json
    thisCount=$(jq --raw-output '[.participants[].id] | unique | length' $tmp/$thisInstance.json)
    echo $thisCount
    exit
}

mung()
{
    ### TODO
    ### Build a string that includes course title, meeting date, and meeting count
    echo ""
}
export -f dblEncode
getMeetings
meetingBasics
