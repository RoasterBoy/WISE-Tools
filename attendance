#!/bin/bash
#
echo "TODO Filter for meetings within date range (start/end, start/new, all/now)"
beginDate=$(date +%s)
#trap "rm -vf this.* hosts.json cadaver.put " EXIT
set -e
thisDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
thisAuth=$(python3 $thisDir/get.auth.py)
tmp=~/tmp/meetings
mkdir -p "$tmp"
touch $tmp/moo
rm $tmp/*
### Set default value to this date next year. We might need to rethink this.
beginDate=$(date -d "Next year" +%s)
now=$(date +%s)
trackingField=Course
keepDetail=false
UUIDFile="$tmp/UUID.list"
mungFile=$tmp/mung.list
:>$UUIDFile
msg()
{
    if [  "$verbose" = true ];
    then
	msgString=$*
	echo "%% $msgString"
    fi
}

getHosts()
{
    hostList=$tmp/hosts.list
    :>$hostList
    msg "Getting hosts"
    curl -s --location --request GET 'https://api.zoom.us/v2/users?status=active&page_size=30' \
	 --header 'Authorization: Bearer '"$thisAuth" -o hosts.json
	jq -r '.users[] | select(.type == 2)  | .id' hosts.json > $hostList
    msg "Got hosts"
}

getMeetings()
{
    retrieveType="scheduled"
    getHosts # returns $hostList
    while IFS='' read -r thisHost ; do
	msg "Working on meetings for $thisHost"
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/users/'"$thisHost"'/meetings?page_size=300&type='$retrieveType \
	     --header 'Authorization: Bearer '"$thisAuth" -o "$tmp"/"$thisHost".info.json 
    done < $hostList
    jq --slurp '.' $tmp/*info.json > $tmp/big.json
    touch $tmp/all.meetings.list
    #    jq --arg BEGIN $beginDate --arg TODAY $now '.[].meetings[] | select (.start_time | fromdate > ($BEGIN | tonumber)) |  select ((.start_time | fromdate) < ($TODAY | tonumber))  | .id' $tmp/big.json  > $tmp/all.meetings.list
    jq --arg BEGIN $beginDate --arg TODAY $now '.[].meetings[] | select (.start_time | fromdate > ($BEGIN | tonumber)) | .id' $tmp/big.json  > $tmp/all.meetings.list
    sort --unique > "$tmp"/meetings.list < "$tmp"/all.meetings.list
}
meetingBasics()
{
    getMeetings
    showAll="?show_previous_occurrences=true"
    while IFS='' read -r thisMtg ; do
	curl -s  --request GET \
	     'https://api.zoom.us/v2/meetings/'"$thisMtg"$showAll\
	     --header 'Authorization: Bearer '"$thisAuth"\
	     -o "$tmp"/"$thisMtg".details.json
	gotItem=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.type.jq "$tmp"/"$thisMtg".details.json)
	if [[ $gotItem = "" ]];
	then 
	    # Leaving next line for debugging purposes
   	    rm "$tmp"/"$thisMtg".details.json  #"$tmp"/"$thisMtg".nope.json
	else
	mtgCount=$(jq '.occurrences|length' "$tmp"/"$thisMtg".details.json)
	    msg "Got a \$mtgCount $mtgCount  in "$tmp"/"$thisMtg".details.json"
	    if [[ $mtgCount -ge 3 ]]; then
		gotTopic=$(jq  --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.topic.jq  "$tmp"/"$thisMtg".details.json)
		gotReg=$(jq -r '.tracking_fields[] | select(.field == "Registration") | .value' "$tmp"/"$thisMtg".details.json)
		msg "\$gotTopic is $gotTopic"
		msg "\$gotReg is $gotReg"
		getInstances "$gotItem" "$gotTopic" "$gotReg"
	    else
		rm -v "$tmp"/"$thisMtg".details.json
	    fi
	fi
    done < "$tmp"/all.meetings.list
}
getInstances()
{
    thisID=$1
    thisTopic=$2
    thisReg=$3
    curl -s  --request GET \
	 'https://api.zoom.us/v2/past_meetings/'"$thisID"/instances\
	 --header 'Authorization: Bearer '"$thisAuth" -o $tmp/$thisID.occurrences.json
    #
    jq -r '.meetings[] | [.uuid, (.start_time|fromdate)] | @tsv' $tmp/$thisID.occurrences.json > $UUIDFile
    #
    while IFS=$'\t' read -r gotUUID gotStartTime; do
	msg $gotUUID
	dblEncode $gotUUID
	fetchInstance $other
	if [[ $thisCount -gt 4 ]]; then
	    msg "Writing to $mungFile"
	    printf "%s\t%s\t%i\t%i\n" "$gotTopic" $gotStartTime   $thisCount $thisReg >> $mungFile
	    sed -i -e 's/\"//g' $mungFile
	fi
	done < $UUIDFile
}
dblEncode()
{
    local this=$1
    other=$(urlencode $(urlencode $this))
}

fetchInstance()
{
    local thisItem=$1
    curl -s --location --request GET \
	 'https://api.zoom.us/v2/past_meetings/'"$thisItem"/participants?page_size=100\
	 --header 'Authorization: Bearer '"$thisAuth" -o $tmp/$other.participants.json
    thisCount=$(jq -r '[.participants[].name] | unique | length' $tmp/$thisItem.participants.json)
}

mung()
{
    ### TODO
    ### Build a string that includes course title, meeting date, and meeting count
    echo ""
}
#export -f dblEncode
while getopts "hs:v" opt; do
    case ${opt} in
	s )
	    ### -s Start date for retrieving events
	    today=$(date +%Y-%m-%d)
	    beginDate=$(date -d "$OPTARG" +%s)
	    ;;	    
	v ) #Verbose
	    ### -v Verbose mode
	    verbose=true
	    ;;
	h) # Print help and exit
	    ### -h Prints this message
	    help
	    ;;
	?)
	    help
	    ;;
	
    esac
done
getMeetings
meetingBasics
sort -k1,2 -o mung.list  mung.list
awk -F '\t' '{printf "%s\t%s\t%.2f%%\t%d\t%d\n",  $1,  strftime("%c",$2) ,($3/$4)*100, $3, $4 }' /home/ubuntu/tmp/meetings/mung.list > attendance.tsv
sed -i '1s/^/Course	Date	Percentage	Attendance	Registration\n/' attendance.tsv
ssconvert attendance.tsv attendance.xlsx
