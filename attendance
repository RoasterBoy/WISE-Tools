#!/bin/bash
#trap "rm -vf this.* hosts.json cadaver.put " EXIT
set -e
thisDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
thisAuth=$(python3 $thisDir/get.auth.py)
tmp=~/tmp/meetings
mkdir -p "$tmp"
touch $tmp/moo
rm $tmp/*
trackingField=Course
keepDetail=false
UUIDFile="$tmp/UUID.list"
encodedFile=$tmp/encoded.list
mungFile=$tmp/mung.list
:>$mungFile
:>$UUIDFile
:>$encodedFile
msg()
{
    if [  "$verbose" = true ];
    then
	msgString=$*
	echo "%% $msgString"
    fi
}

getHosts()
{
    hostList=$tmp/hosts.list
    :>$hostList
    msg "Getting hosts"
    curl -s --location --request GET 'https://api.zoom.us/v2/users?status=active&page_size=30' \
	 --header 'Authorization: Bearer '"$thisAuth" -o hosts.json
	jq -r '.users[] | select(.type == 2)  | .id' hosts.json > $hostList
    msg "Got hosts"
}

getMeetings()
{
    retrieveType="scheduled"
    getHosts # returns $hostList
    while IFS='' read -r thisHost ; do
	msg "Working on meetings for $thisHost"
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/users/'"$thisHost"'/meetings?page_size=300&type='$retrieveType \
	     --header 'Authorization: Bearer '"$thisAuth" -o "$tmp"/"$thisHost".info.json 
    done < $hostList
    jq --slurp ' .[] | .meetings[].id' "$tmp"/*info.json  > "$tmp"/all.meetings.list
    sort --unique > "$tmp"/meetings.list < "$tmp"/all.meetings.list
}
meetingBasics()
{
    msg "Working on \$trackingField $trackingField"
    msg "Initializing $cmd.list"
    rptTypeList=$tmp/this.list
    :>"$rptTypeList"
    getMeetings
    showAll="?show_previous_occurrences=true"
    while IFS='' read -r thisMtg ; do
	curl -s  --request GET \
	     'https://api.zoom.us/v2/meetings/'"$thisMtg"$showAll\
	     --header 'Authorization: Bearer '"$thisAuth"\
	     -o "$tmp"/"$thisMtg".details.json
	gotItem=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.type.jq "$tmp"/"$thisMtg".details.json)
	if [[ $gotItem = "" ]];
	then 
	    # Leaving next line for debugging purposes
   	    rm "$tmp"/"$thisMtg".details.json  #"$tmp"/"$thisMtg".nope.json
	else
#	recurCount=$(jq '.recurrence.repeat_interval' "$tmp"/"$thisMtg".details.json)
	mtgCount=$(jq '.occurrences|length' "$tmp"/"$thisMtg".details.json)
	    echo "Got a \$mtgCount $mtgCount  in "$tmp"/"$thisMtg".details.json"
	    if [[ $mtgCount > 1 ]]; then
		gotTopic=$(jq  --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.topic.jq  "$tmp"/"$thisMtg".details.json)
		msg "\$gotTopic is $gotTopic"
		getInstances "$gotItem"
	    else
		#	    mv "$tmp"/"$thisMtg".details.json  "$tmp"/"$thisMtg".nope.json
		rm -v "$tmp"/"$thisMtg".details.json
	    fi
	fi
    done < "$tmp"/all.meetings.list
#    fetchInstance
    gThisList=$rptTypeList
}
getInstances()
{
    thisID=$1
    curl -s  --request GET \
	 'https://api.zoom.us/v2/past_meetings/'"$thisID"/instances\
	 --header 'Authorization: Bearer '"$thisAuth" -o $thisID.occurrences.json
    jq -r '.meetings[] | [.uuid, .start_time] | @tsv' $thisID.occurrences.json >> $UUIDFile
    while IFS=$'\t' read -r gotUUID gotStartTime; do
	echo $gotUUID
	dblEncode $gotUUID
	fetchInstance $other
	#	printf "%s\t%s\t%s\t%s\n" "$gotTopic" $gotStartTime $gotUUID $other >> $mungFile
	if [[ $thisCount > 4 ]]; then
	    printf "%s\t%s\t%i\n" $gotStartTime "$gotTopic"  $thisCount >> $mungFile
	fi
	done < $UUIDFile
}
dblEncode()
{
    local this=$1
    that=$(urlencode $this)
    other=$(urlencode $that)
    echo $other

}

fetchInstance()
{
    local thisItem=$1
#    while IFS=$'\t' read -r gotThing gotTime ; do
#	dblEncode $gotThing
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/past_meetings/'"$thisItem"/participants?page_size=100\
	     --header 'Authorization: Bearer '"$thisAuth" -o $tmp/$other.participants.json
	thisCount=$(jq -r '[.participants[].id] | unique | length' $tmp/$thisItem.participants.json)
#    done < $UUIDFile
}

mung()
{
    ### TODO
    ### Build a string that includes course title, meeting date, and meeting count
    echo ""
}
export -f dblEncode
getMeetings
meetingBasics
