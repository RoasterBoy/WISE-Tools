#!/bin/bash
### To Do

tmp=~/wa
getReg=false
init=false
thisDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
if test -f this.tsv; then
    rm this.tsv
fi
getAuth()
{   
    thisKey=`echo -ne "APIKEY:$WA_key"|base64`
    curl -s  --header "Content-Type:application/x-www-form-urlencoded" \
	 --header "Authorization: Basic $thisKey" -d "grant_type=client_credentials&scope=auto"\
	 https://oauth.wildapricot.org/auth/token  -o $tmp/token.json
    # 
    thisAuth=$(jq -r '.access_token' $tmp/token.json)
    #
}
getFiles ()
{
if [[ "$init" = false ]] ; then
    msg "Skipping initialization"
    return
fi
msg "Doing initialization"
mkdir -p "$tmp"
touch "$tmp"/tmp.tmp
rm -r "${tmp:?}"/*
getAuth
curl -s --header "Authorization: Bearer $thisAuth"\
     'https://api.wildapricot.org/v2.1/accounts/'"$WA_account"'/Events'$filter -o $tmp/events.json
jq '.[] | sort_by(.Name) | .[].Id | rtrimstr(",")' $tmp/events.json > $tmp/events.list

	while IFS='' read -r thisEvent || [[ -n "$thisEvent" ]]; do
	    # WA has a limit of the number of calls per second
	    # curl will wait 1^6 seconds or 1 min. 4 secs before starting again.
	    if [ ! -f $tmp/$thisEvent-details.json ]; then
		curl -s --retry 6 --header "Authorization: Bearer $thisAuth"  \
		     https://api.wildapricot.org/v2.1/accounts/$WA_account/events/$thisEvent \
		     -o $tmp/$thisEvent-details.json
	    fi
	done  < $tmp/events.list
}
     




mungFiles ()
{
#    echo "" > allFiles.tsv
    FILES=$tmp/*details.json
    cd $thisDir
    echo "<h1>This catalog</h1>" > item.html
    echo "<style>table, th, td { \
      border: 1px solid black;  \
      border-collapse: collapse;\
      }\
      </style>\
      <table>" >> item.html
    echo "<tr><th>Course</th><th>Start Date</th></tr>" >> item.html
    for f in $FILES
    do
	#E	echo "Working on $f"
	## note: there is a hard link betwee .jq in WISE-Tools and ~/.jq. This allows us to keep .jq under version control.
	jq -r '[.Name, myDateTime(.StartDate)]|@tsv' $f| \
	    awk 'BEGIN {FS="\t";}; {printf "<tr><td>%s</td><td>%s</td><td>%s</td></tr>\n",$1, $2, $3 }' >> item.html
    done
    echo "</table>" >> item.html
}

msg()
{
    if [  "$verbose" = true ];
    then
#       echo "Verbose is $verbose"
        thisString=$@
        echo "%% $thisString"
    fi
}

set -eE -o functrace
failure() {
    local lineno=$1
    local msg=$2
    echo "Failed at $lineno: $msg"
}
trap 'failure ${LINENO} "$BASH_COMMAND"' ERR
start_time="$(date -u +%s)"
doBook()
{
    #
    echo "Doing $cmd"
    FILES=$tmp/*details.json
    cd $thisDir
    jq -s '.' $tmp/*details.json | \
	jq -r '.[]["<h1>" + .Name + "</h1>,"<p>"+ myDateTime(.StartDate) + "<p>,.Details.DescriptionHtml]'  > item.html
}
    sed -ibak 's/\/resources/https:\/\/assumptionwise.org\/resources/' item.html
doFlyer()
{
    #
    echo "Doing $cmd"
}
doList()
{
    #
    echo "Doing $cmd"
    mungFiles
}
doTags()
{
    #
    FILES=$tmp/*details.json
    cd $thisDir
    echo "<h1>This catalog</h1>" > item.html
    for f in $FILES
    do
	#E	echo "Working on $f"
	## note: there is a hard link betwee .jq in WISE-Tools and ~/.jq. This allows us to keep .jq under version control.
	jq --raw-output '.|[.Name,(.Tags| map(select(test("2023|a-|b-")|not))|.[])] | @tsv' $f >> this.tsv
    done
}

while getopts "bfilt" opt; do
    case ${opt} in
	b ) ### Make course book
	    cmd=Book
	    echo "do$cmd"
	    ;;
	f ) #3# Make flyer
	    cmd=Flyer
	    ;;
	i ) ## Initialize WA folder
	    init=true
	    ;;
	l ) ### make course list
	    cmd=List
	    ;;
	t ) ### Group courses by tags
	    cmd=Tags
	    ;;
	\?) valid=0
            echo "An invalid option has been entered: $opt"
            ;;
        :)  valid=0
            echo "The additional argument for option $OPTARG was omitted."
            ;;
    esac 
done
getFiles
do$cmd
