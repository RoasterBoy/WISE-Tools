#!/bin/bash
# Parse options to the `zoom` command
set -e
start_time="$(date -u +%s)"
simple=false
help()
{
    thisScript=$(which "$0")
    sed -rn 's/^\s*### ?//;T;p' "$thisScript"
    exit
}
msg()
{
    if [  "$verbose" = true ];
    then
	#	msgString=$@
	msgString=$*
	echo "%% $msgString"
    fi
}
setup()
{
    rptType=$1
#    thisDir=$(cd $(dirname $0) && pwd)
    thisDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    thisAuth=$(python $thisDir/get.auth.py)
    justLinks=$tmp/just.links.tsv
    msg "Initializing $justLinks"
    :>"$justLinks"
    sortedLinks=$tmp/sorted.links.tsv
    msg "Doing setup for \$rptType $rptType "
    HTMLFile=$tmp/$rptType.html
    msg "Initializing $HTMLFile"
    :>"$HTMLFile"
    if [[ $simple = "false" ]]; then
	echo "<h2>$rptTitle</h2>" > "$HTMLFile"
    thisDate=$(date  +"%B %d, %Y %-I:%m %p")
    echo "<p>Updated: $thisDate" >> "$HTMLFile"
    fi
}
init()
{
    tmp=~/tmp/zoom
    rptType=$1
    if [[ "$init" = false ]] ; then
	msg "Skipping initialization" 
	return
    fi
    msg "Doing initialization"
#    return
    mkdir -p "$tmp"
    touch "$tmp"/tmp.tmp
    rm -r "${tmp:?}"/*
    
}
getHosts()
{
    hostList=$tmp/hosts.list
    hostJSON=$tmp/hosts.json
    # msg "Host list is $hostList"
    # msg "JSON file is $hostJSON"
    curl -s --location --request GET 'https://api.zoom.us/v2/users?status=active&page_size=30' \
	 --header 'Authorization: Bearer '"$thisAuth" \
	 --header 'Cookie: _zm_lang=en-US; cred=E847D55F4DDCDBC0D8EE197899BCB2C9' -o $hostJSON
    # We might skip $hostJSON when we're confident
    jq -r '.users[] | select(.type == 2)  | .id' $hostJSON > $hostList
    msg "At end of getHosts"
}
getMeetings()
{
    if [[ "$init" = false ]] ; then
	msg "Skipping update of meeting"
	return
    fi
    if [[ "$getAll" = true ]]; then
	retrieveType="scheduled"
    else
	retrieveType="upcoming"	
    fi
	msg "Getting all meetings that are $retrieveType"
	getHosts # returns $hostList
	while IFS='' read -r thisHost ; do
	    msg "Working on meetings for $thisHost"

	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/users/'"$thisHost"'/meetings?page_size=300&type='$retrieveType \
		 --header 'Authorization: Bearer '"$thisAuth" -o "$tmp"/"$thisHost".info.json 
	done < $hostList
    jq --slurp ' .[] | .meetings[].id' "$tmp"/*info.json  > "$tmp"/all.meetings.list
    sort --unique > "$tmp"/meetings.list < "$tmp"/all.meetings.list
}
meetingBasics()
{
    msg "Working on $trackingField right now"
    msg "Initializing $cmd.list"
    rptTypeList=$tmp/this.list
    :>"$rptTypeList"
    getMeetings
    while IFS='' read -r thisMtg ; do
	if [[ "$init" = false ]] ; then
	    msg "Skipping update of $rptType details"
	else
	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/meetings/'"$thisMtg" \
		 --header 'Authorization: Bearer '"$thisAuth"\
		 -o "$tmp"/"$thisMtg".details.json 
	fi
	gotItem=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.type.jq "$tmp"/"$thisMtg".details.json)
	gotTopic=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.topic.jq  "$tmp"/"$thisMtg".details.json)
	if [[ $gotItem = "" ]] ; then
	    # msg "No $rptType found"
	    # Get rid of this file
#	     mv "$tmp"/"$thisMtg".details.json "$tmp"/"$thisMtg".details.json-null
	    rm "$tmp"/"$thisMtg".details.json
	else
	    msg "Got $gotTopic"
	    echo "$gotItem" >> "$rptTypeList" 
	fi
	
    done < "$tmp"/meetings.list
    gThisList=$rptTypeList # return name of the meeting type list
}

doCourses()
{
    properName=$1
    msg "Geting dates for $properName"
   meetingBasics Course
    #

    for file in "$tmp"/*.details.json;
    do
	thisTopic=$(jq '.topic' "$file")
	msg "Deep Work on $thisTopic"
	if [[ $simple = "true" ]]; then
	    jqFile="$thisDir"/make.simple.course.links.jq
	    theseTimes=""
	else
	    jqFile="$thisDir"/make.course.links.jq
	    theseTimes=$(jq -r '.occurrences[].start_time' "$file" | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	fi
	thisLink=$(jq -r -f "$jqFile" "$file")
	echo "$thisLink	$theseTimes" >> "$justLinks"
    done
    msg "Initializing $sortedLinks"
    :>"$sortedLinks"
    if [[ $simple = "true" ]]; then
	printf "Course\tLink\tHost and CA\tPhone\tMeeting Id\tPasscode\tAlternate Hosts\n" > "$sortedLinks"
	sort --version-sort "$justLinks" >> "$sortedLinks"
	msg "Sorted links are in $sortedLinks"
    else
	sort --version-sort "$justLinks" >> "$sortedLinks"
	gawk -F '\t' -f "$thisDir"/zoom.courses.awk "$sortedLinks" >> "$HTMLFile"
	msg "Output file is $HTMLFile"
    fi
}
doClubs()
{
    properName=$1
    msg "Geting dates for $properName"
    meetingBasics Club

    for file in "$tmp"/*.details.json;
    do
	thisTopic=$(jq '.topic' "$file")
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f "$thisDir"/make.zoom.links.jq "$file")
	theseTimes=$(jq -r -f "$thisDir"/get.times.jq "$file")
	echo "$thisLink	$theseTimes" >> "$justLinks"
    done
    sort --version-sort "$justLinks" > "$sortedLinks"
    gawk -F '\t' -f "$thisDir"/zoom.clubs.awk "$sortedLinks" >> "$HTMLFile"
    msg "HTML Link file is $HTMLFile"
}
doMtg()
{

    meetingBasics $thids # uses $rptType $rptName
    
    for file in "$tmp"/*.details.json;
    do
	thisTopic=$(jq '.topic' "$file")
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f "$thisDir"/make.zoom.links.jq "$file")
	theseTimes=$(jq -r -f "$thisDir"/get.times.jq "$file")
	echo "$thisLink	$theseTimes" >> "$justLinks"
    done
    sort --version-sort "$justLinks" > "$sortedLinks"
    gawk -F '\t' -f "$thisDir"/zoom.clubs.awk "$sortedLinks" >> "$HTMLFile"
    msg "HTML Link file is $HTMLFile"
}
doSIG()
{
    properName=$1
    meetingBasics SIGs # uses $rptType $rptName
    msg "Geting dates for $properName"
    for file in "$tmp"/*.details.json;
    do
	thisTopic=$(jq '.topic' "$file")
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f "$thisDir"/make.zoom.links.jq "$file")
	theseTimes=$(jq -r -f "$thisDir"/get.times.jq "$file" | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	echo "$thisLink $theseTimes" >> "$justLinks"
    done
    sort --version-sort "$justLinks" > "$sortedLinks"
    gawk -F '\t' -f "$thisDir"/zoom.SIGs.awk "$sortedLinks" >> "$HTMLFile"
    msg "HTML Link file is $HTMLFile"
    
}
doEvents()
{
    properName=$1
    msg "Geting dates for $properName"
   
    meetingBasics Event
    
    for file in "$tmp"/*.details.json;
    do
	thisTopic=$(jq '.topic' "$file")
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f "$thisDir"/make.zoom.links.jq "$file")
	#	theseTimes=$(jq -r '.occurrences[] | select(.status == "available")  | .start_time ' "$file" | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	theseTimes=$(jq -r '.start_time' "$file" | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "%s" TIME)
#	theseTimes=$(jq -r '(.start_time) ' "$file" )
	echo "$theseTimes	$thisLink" >> "$justLinks"
    done
    sort "$justLinks" > "$sortedLinks"
    gawk -F '\t' -f "$thisDir"/zoom.events.awk "$sortedLinks" >> "$HTMLFile"
    msg "HTML Link file is $HTMLFile"
}
doRecordings()
{
    msg "Geting recordings for $trackingField"
    getHosts
    # Get all events of $rptType
    meetingBasics # returns "$gThisList"    # get IDs of these events
    if [[ "$gThisList" = "" ]]; then
	echo "Missing global list $gThisList"
	exit
    fi
    ### TODO - We need to get recordings from 30 days ago, not just a fixed day. Currently 2020-09-01
    since=$(date +%Y-%m-%d -d "30 days ago")
    while IFS='' read -r thisHost; do
	curl -s --request GET \
	     'https://api.zoom.us/v2/users/'"$thisHost"'/recordings?page_size=300&from='$since \
	     --header 'Authorization: Bearer '"$thisAuth" -o "$tmp"/"$thisHost".recordings.json
    done < "$hostList"
    recordingLinks=$tmp/recording.links.tsv
    msg "Initializing $recordingLinks"
    :>$recordingLinks
    downloadLinks=$tmp/download.links.tsv
    msg "Initializing $downloadLinks"
    :>$downloadLinks
    jq -s '.' "$tmp"/*recordings.json > "$tmp"/big.json
    # echo "We have this gThisList: " "$gThisList"
    while IFS='' read -r thisItem; do
	jq -r --arg ID "$thisItem"  -f "$thisDir"/get.recording.links.jq "$tmp"/big.json >> "$recordingLinks"
	jq -r --arg ID "$thisItem"  -f "$thisDir"/get.download.links.jq "$tmp"/big.json >> "$downloadLinks"
    done < "$gThisList"
    sort -r "$recordingLinks" > "$sortedLinks"
    gawk -F '\t' -f "$thisDir"/zoom.recordings.awk "$sortedLinks" >> "$HTMLFile"
    msg "Output file is $HTMLFile"
    #echo "$gThisList"
#    exit
 #   getParticipants  # uses gThisList for the lsit of meetings whence participants will be fetched
    downloadRecordings

}
getParticipants()
{
    while IFS='' read -r partMtg ; do 
    msg "Also getting participant detail for this meeting: $partMtg"

    curl -s --location --request GET \
	 'https://api.zoom.us/v2/metrics/meetings/'"$partMtg"'/participants?type=past' \
	 --header 'Authorization: Bearer '"$thisAuth" \
	 --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o "$tmp"/"$partMtg".participants.json
    done < "$gThisList"

    echo "User,Device,Location,Network Type,Microphone,Camera,Speaker, Version, IP" > "$tmp"/participants.csv
    for part in "$tmp"/*participants.json;
    do
	jq -r -f "$thisDir"/get.participant.detail.jq "$part" >> "$tmp"/participants.csv
    done
    msg "Participants' file is $tmp/partcipants.xlsx"
    ssconvert "$tmp"/participants.csv "$tmp"/participants.xlsx    
}
downloadRecordings()
{
    recDir=~/Recordings
    echo "Does not work yet"
    exit
    awk -F "\t" '{printf "%s<br/>\n", (strftime("%B %d, %Y %-I:%M %p",$1))}' 
    F "\t" '{print $3}' download.links.tsv | awk -F "/" '{print $6}' | xargs -I filename touch ~/Recordings/filename
    mkdir -p "$recDir"
    awk -F "\t" '{print $3}' $downloadLinks 
	  if [ ! -f $thisFile ]; then
	      touch $thisFile
	  fi
 #   done    < "$downloadLinks"
}

while getopts ":r:t:nShv" opt; do
    case ${opt} in
	r )
	    getAll=true
	    # This means that we'll also look at upcoming meetings, but won't find recordings.
	    tmpType=$OPTARG
	    rptType=Recording
	    case "$tmpType" in
		### -r Zoom recording type
		[Cc]ourse*)
		    ###        Courses
		    trackingField="Course"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		;;
		[Ee]vent*)
		    ###        Events
		    trackingField="Event"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    ;;
		[Cc]ommittee*)
		    ###        Events
		    trackingField="Committee Meeting"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    ;;
		* )
		    echo "%% Invalid tracking field for recordngs : $OPTARG"
		    help
		    ;;
	    esac

	    ;;
	S ) # capital S
	    ### Simplified output to allow us to use the data in a spreadsheet.
	    simple=true
	    ;;
	t )
	    ### -t Zoom meeting type
	    tmpType=$OPTARG
	    # matching upper or lower, singular or plural
	    msg "Got type $tmpType"
	    case "$tmpType" in
		[Cc]ourse*)
		    ###        Courses
		    trackingField="Course"
		    rptTitle="Zoom Links for Courses"
		    cmd=Courses
		;;
		[Cc]ommittee*)
		    ###        Committees
		    trackingField="Committee Meeting"
		    rptTitle="Zoom Links for Committee Meetings"
		    cmd=Mtg
		    rptType=Committees
		    ;;
		[Ee]vent*)
		    ###        Events
		    trackingField="Event"
		    rptTitle="Zoom Links for Events"
		    cmd=Events
		    ;;
		[Cc]lub*)
		    ###        Clubs
		    trackingField="Club Meeting"
		    rptTitle="Zoom Links for Clubs and Groups"
		    cmd=Mtg
		    rptType=Clubs
		    ;;
		SIG)
		    ### SIG - Special Interest Group
		    trackingField="SIG"
		    rptTitle="Zoom Links for Special Interest Groups (SIGS)"
		    cmd=Mtg
		    rptType=SIG
		    ;;
		* )
		    echo "%% Invalid meeting type : $OPTARG"
		    help
		    ;;
	    esac
	    ;;
	n )
	    ### -n Don't initialize, i.e., don't delete contents of ~/tmp/zoom
	    init=false
	    ;;
	h )
	    ### -h Print help and exits
	    help
	    ;;
	v )
	    ### -v Set verbose mode
	    verbose="true"
	    ;;
	* )
	    echo "Invalid Option: -$OPTARG" 1>&2
	    exit 1
	    ;;
    esac
done
msg "Will do \$rptType $rptType for \$trackingField $trackingField"
init "$cmd"
setup "$cmd"
if [[ -z $cmd ]]; then
    echo "%% *Error* - Missing meeting type or recording"
    help
fi
do$cmd $rptType
end_time=$(date -u +%s)
elapsed=$((end_time-start_time))
msg "Elapsed time: $elapsed seconds"
