#!/bin/bash
# Parse options to the `zoom` command
set -e
start_time="$(date -u +%s)"
simple=false
help()
{
    thisScript=$(which "$0")
    sed -rn 's/^\s*### ?//;T;p' "$thisScript"
    exit
}
msg()
{
    if [  "$verbose" = true ];
    then
	msgString=$@
	echo "%% $msgString"
    fi
}
setup()
{
    rptType=$1
    thisSub=$2
    thisDir=$(cd `dirname $0` && pwd)
    thisAuth=$(python $thisDir/get.auth.py)
    justLinks=$tmp/just.links.tsv
    msg "Initializing $justLinks"
    :>$justLinks
    sortedLinks=$tmp/sorted.links.tsv
    msg "Doing setup for \$rptType $rptType and \$thisSub $thisSub"
    case "$rptType" in
	[Cc]ourse*)
	    title="Zoom Links for Courses"
	    ;;
	[Cc]lub*)
	    title="Zoom Links for Club Meetings"
	    ;;
	[Cc]ommittee*)
	    title="Zoom Links for Committee Meetings"
	    ;;
	[Ee]vent*)
	    title="Zoom Links for Events"
	    ;;
	[Rr]ecording*)
	    title="Recordings for $thisSub"
	    ;;
	*)
	    title=$rptType
	    ;;
    esac
    msg "\$title is $title"
    HTMLFile=$tmp/$rptType.links.html
    msg "Initializing $HTMLFile"
    :>$HTMLFile
    if [[ $simple = "false" ]]; then
	echo "<h2>$title</h2>" > $HTMLFile
    thisDate=$(date)
    echo "<p>Updated: $thisDate" >> $HTMLFile
    fi
}
init()
{
    tmp=~/tmp/zoom
    rptType=$1
    if [[ "$init" = false ]] ; then
	msg "Skipping initialization" 
	return
    fi
    msg "Doing initialization"
#    return
    mkdir -p $tmp
    touch $tmp/tmp.tmp
    rm -r $tmp/*
}
getMeetings()
{
    if [[ "$init" = false ]] ; then
	msg "Skipping update of meeting"
	return
    fi
    if [[ "$getAll" = true ]]; then
	retrieveType="scheduled"
    else
	retrieveType="upcoming"	
    fi
	msg "Getting all meetings that are $retrieveType"
	hostList=$(get.zoom.hosts.sh)
	while IFS='' read -r thisHost ; do
	    msg "Working on meetings for $thisHost"

	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/users/'$thisHost'/meetings?page_size=300&type='$retrieveType \
		 --header 'Authorization: Bearer '$thisAuth\
		 --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o $tmp/$thisHost.info.json 
	done < $hostList
    jq --slurp ' .[] | .meetings[].id' $tmp/*info.json  > $tmp/all.meetings.list
    cat $tmp/all.meetings.list  | sort --unique > $tmp/meetings.list
}
meetingBasics()
{
    tmpType=$1
    msg "Working on $mtgType right now"
    msg "Initializing $tmpType.list"
    tmpTypeList=$tmp/$tmpType.list
    :> $tmpTypeList
    getMeetings
    if [[ ${tmpType: -1} = "s" ]]; then
	tmpType=${tmpType%?}
    fi

    while IFS='' read -r thisMtg ; do
	if [[ "$init" = false ]] ; then
	    msg "Skipping update of $tmpType details"
	else
	    # Do we need '?occurrence_id=%3Cstring%3E' in url?
	    # Do we need cookie?
	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/meetings/'$thisMtg \
		 --header 'Authorization: Bearer '$thisAuth\
#		 --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' \
		 -o $tmp/$thisMtg.details.json 
	fi
	gotItem=$(jq --arg TYPE "$tmpType" '. | select( (.tracking_fields) != null) | select(.tracking_fields[].value == $TYPE) | .id' $tmp/$thisMtg.details.json)
	gotTopic=$(jq --arg TYPE "$tmpType" '. | select( (.tracking_fields) != null) | select(.tracking_fields[].value == $TYPE) | .topic'  $tmp/$thisMtg.details.json)
	if [[ $gotItem = "" ]] ; then
	    # msg "No $tmpType found"
	    # Get rid of this file
	     mv $tmp/$thisMtg.details.json $tmp/$thisMtg.details.json-null
	    #rm $tmp/$thisMtg.details.json
	else
	    msg "Got $gotTopic"
	    echo $gotItem >> $tmpTypeList 
	fi
	
    done < $tmp/meetings.list

    gThisList=$tmpTypeList # return name of the meeting type list
}

doCourse()
{
    properName=$1
    meetingBasics Course
    #

    for file in $tmp/*.details.json;
    do
	thisTopic=$(jq '.topic' $file)
	msg "Deep Work on $thisTopic"
	if [[ $simple = "true" ]]; then
	    jqFile=$thisDir/make.simple.course.links.jq
	    theseTime=""
	else
	    jqFile=$thisDir/make.course.links.jq
	    theseTimes=$(jq -r '.occurrences[].start_time' $file | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	fi
	thisLink=$(jq -r -f $jqFile $file)
	echo "$thisLink	$theseTimes" >> $justLinks
    done
    msg "Initializing $sortedLinks"
    :>$sortedLinks
    if [[ $simple = "true" ]]; then
	printf "Course\tLink\tHost and CA\tPhone\tMeeting Id\tPasscode\tAlternate Hosts\n" > $sortedLinks
	sort --version-sort $justLinks >> $sortedLinks
	msg "Sorted links are in $sortedLinks"
    else
	sort --version-sort $justLinks >> $sortedLinks
	gawk -F '\t' -f $thisDir/zoom.courses.awk $sortedLinks >> $HTMLFile
	msg "Output file is $HTMLFile"
    fi
}
doClub()
{
    properName=$1
    msg "Geting recordings for $properName"
    meetingBasics Club

    for file in $tmp/*.details.json;
    do
	thisTopic=$(jq '.topic' $file)
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f $thisDir/make.zoom.links.jq $file)
	theseTimes=$(jq -r -f $thisDir/get.times.jq $file | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	echo "$thisLink $theseTimes" >> $justLinks
    done
    sort --version-sort $justLinks > $sortedLinks
    gawk -F '\t' -f $thisDir/zoom.clubs.awk $sortedLinks >> $HTMLFile
    msg "HTML Link file is $HTMLFile"
}
doCommittee()
{
    meetingBasics "Committee Meeting"
    
    for file in $tmp/*.details.json;
    do
	thisTopic=$(jq '.topic' $file)
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f $thisDir/make.zoom.links.jq $file)
	theseTimes=$(jq -r '.occurrences[] | select(.status == "available")  | .start_time ' $file | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	echo "$thisLink $theseTimes" >> $justLlinks
    done
    sort --version-sort $justLinks > $sortedLinks
    gawk -F '\t' -f $thisDir/zoom.clubs.awk $sortedLinks >> $HTMLFile
    msg "HTML Link file is $HTMLFile"
}
doEvent()
{
    properName=$1
    msg "Geting recordings for $properName"
   
    meetingBasics Event
    
    for file in $tmp/*.details.json;
    do
	thisTopic=$(jq '.topic' $file)
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f $thisDir/make.zoom.links.jq $file)
#	theseTimes=$(jq -r '.occurrences[] | select(.status == "available")  | .start_time ' $file | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	theseTimes=$(jq -r '.start_time ' $file )
	echo "$thisLink $theseTimes" >> $justLinks
    done
    sort --version-sort just.links.tsv > $sortedLinks
    gawk -F '\t' -f $thisDir/zoom.clubs.awk $sortedLinks >> $HTMLFile
    msg "HTML Link file is $HTMLFile"
}
doRecording()
{
    rptType=$2
    msg "Geting recordings for $rptType"
    hostList=$(get.zoom.hosts.sh)
    # Get all events of $rptType
    meetingBasics $rptType # returns $gThisList    # get IDs of these events
    ### TODO - We need to get recordings from 30 days ago, not just a fixed day. Currently 2020-09-01
    while IFS='' read -r thisHost; do
	curl -s --request GET \
	     'https://api.zoom.us/v2/users/'$thisHost'/recordings?page_size=300&from=2020-09-10' \
	     --header 'Authorization: Bearer '$thisAuth \
	     --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o $tmp/$thisHost.recordings.json
	
    done < $hostList
    recordingLinks=$tmp/recording.links.tsv
    msg "Initializing $recordingLinks"
    :>$recordingLinks
    jq -s '.' $tmp/*recordings.json > $tmp/big.json
    echo "We have this \$gThisList $gThisList"
    while IFS='' read -r thisItem; do
	jq -r --arg ID $thisItem -f get.recording.links.jq $tmp/big.json >> $recordingLinks
    done < $gThisList
    sort -r $recordingLinks > $sortedLinks
    gawk -F '\t' -f $thisDir/zoom.recordings.awk $sortedLinks >> $HTMLFile
    msg "Output file is $HTMLFile"

#    getParticipants  # uses gThisList for the lsit of meetings whence participants will be fetched

}
getParticipants()
{
    while IFS='' read -r partMtg ; do 
    msg "Also getting participant detail for this meeting: $partMtg"
    # https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardmeetingparticipants
    curl -s --location --request GET \
	 'https://api.zoom.us/v2/metrics/meetings/'$partMtg'/participants?type=past' \
	 --header 'Authorization: Bearer '$thisAuth \
	 --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o $tmp/$partMtg.participants.json
    done < $gThisList

    echo "User,Device,Location,Network Type,Microphone,Camera,Speaker, Version, IP" > $tmp/participants.csv
    for part in $tmp/*participants.json;
    do
	jq -r -f $thisDir/get.participant.detail.jq $part >> $tmp/participants.csv
    done
    msg "Partiticapnts\' file is $tmp/partcipants.csv"
    ssconvert $tmp/participants.csv participants.xlsx

    
}

while getopts ":r:t:nShv" opt; do
    case ${opt} in
	r )
	    ### -r Get recordings for Meeting type, see below
	    getAll=true
	    getRecordings=true
	    rptType=$OPTARG
	    cmd=Recording
#	    echo "Got \$thisMeetingType $thisMeetingType"
	    case "$rptType" in
		[Cc]ourse*)
		    ###        Courses
		    mtgName="Courses"
		;;
		[Cc]ommittee*)
		    ###        Committees
		    mtgName="Committee Meeting"
		    ;;
		[Ee]vent*)
		    ###        Events
		    mtgName="Events"
		    ;;
		* )
		    echo "%% Invalid meeting type : $OPTARG"
		    help
		    ;;
	    esac

	    ;;
	S ) # capital S
	    ### Simplified output to allow us to use the data in a spreadsheet.
	    simple=true
	    ;;
	t )
	    ### -t Zoom meeting type
	    thisCmd=$OPTARG
	    # matching upper or lower, singular or plural
#	    echo "Got type"
	    case "$thisCmd" in
		[Cc]ourse*)
		    ###        Courses
		    mtgName="Course"
		    cmd="Course"
		;;
		[Cc]ommittee*)
		    ###        Committees
		    mtgName="Committee Meeting"
		    cmd=Committee
		    ;;
		[Ee]vent*)
		    ###        Events
		    mtgName="Events"
		    cmd=Event
		    getAll=true
		    ;;
		[Cc]lub*)
		    ###        Clubs
		    mtgName="Club Meeting"
		    cmd=Club
		    ;;
		* )
		    echo "%% Invalid meeting type : $OPTARG"
		    help
		    ;;
	    esac
	    ;;
	n )
	    ### -n Don't initialize, i.e., don't delete contents of ~/tmp/zoom
	    init=false
	    ;;
	h )
	    ### -h Print help and exits
	    help
	    ;;
	v )
	    ### -v Set verbose mode
	    verbose="true"
	    ;;
	* )
	    echo "Invalid Option: -$OPTARG" 1>&2
	    exit 1
	    ;;
    esac
done
msg "Will do \$cmd $cmd for \$mtgName $mtgName"
init "$cmd"
setup "$cmd" "$mtgName"
echo "Repor type is $rptType"

do$cmd  $cmd  "$mtgName"
end_time="$(date -u +%s)"
elapsed="$(($end_time-$start_time))"
msg "Elapsed time: $elapsed seconds"
