#!/bin/bash
# Parse options to the `zoom` command
set -e
help()
{
    thisScript=$(which "$0")
    sed -rn 's/^\s*### ?//;T;p' "$thisScript"
    exit
}
msg()
{
    if [  "$verbose" = true ];
    then
	thisString=$@
	echo "%% $thisString"
    fi
}
setup()
{
    meetingType=$1
    thisSub=$2
    thisDir=$(cd `dirname $0` && pwd)
    thisAuth=$(python $thisDir/get.auth.py)
    tmp=/tmp/zoom
    justLinks=$tmp/just.links.tsv
    :>$justLinks
    sortedLinks=$tmp/sorted.lnks.txt
    msg "Doing setup for $meetingType and $thisSub"
    case "$meetingType" in
	[Cc]ourse*)
	    title="Zoom Links for Courses"
	    ;;
	[Cc]lub[s]*)
	    title="Zoom Links for Club Meetings"
	    ;;
	[Cc]ommittee[s]*)
	    title="Zoom Links for Committee Meetings"
	    ;;
	[Ee]vent[s]*)
	    title="Zoom Links for Events"
	    ;;
	[Rr]ecording*)
	    title="Recordings for $subType"
	    ;;
	*)
	    title=$meetingType
	    ;;
    esac
    msg "\$title is $title"
}
init()
{
    meetingType=$1
    if [[ "$init" = false ]] ; then
	msg "Skipping initialization" 
	return
    fi
    msg "Doing initialization"
#    return
    mkdir -p $tmp
    touch $tmp/tmp.tmp
    rm -r $tmp/*
    :>$sortedLinks
    linkFile=$tmp/$meetingType.links.html
    :>$linkFile
    echo "<h2>$title</h2>" > $linkFile
    thisDate=$(date)
    echo "<p>Updated: $thisDate" >> $linkFile


}
getMeetings()
{
    if [[ "$init" = false ]] ; then
	msg "Skipping update of meeting"
	return
    fi
    if [[ "$getAll" = true ]]; then
	retrieveType="scheduled"
    else
	retrieveType="upcoming"	
    fi
	msg "Getting all meetings that are $retrieveType"
	hostList=$(get.zoom.hosts.sh)
	while IFS='' read -r thisHost ; do
	    msg "Working on meetings for $thisHost"
	    # Removed this from curl &occurrence_id=%3Cstring%3E
	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/users/'$thisHost'/meetings?page_size=300&type='$retrieveType \
		 --header 'Authorization: Bearer '$thisAuth\
		 --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o $tmp/$thisHost.info.json 
	done < $hostList
    jq --slurp ' .[] | .meetings[].id' /tmp/zoom/*info.json  > $tmp/all.meetings.list
    cat $tmp/all.meetings.list  | sort --unique > $tmp/meetings.list
}
meetingBasics()
{
    thisType=$1
    msg "Working on $thisType right now"
    getMeetings
    if [[ ${thisType: -1} = "s" ]]; then
	thisType=${thisType%?}
    fi
    while IFS='' read -r thisItem ; do
	if [[ "$init" = false ]] ; then
	    msg "Skipping update of $thisType details"
	else
	    # Do we need '?occurrence_id=%3Cstring%3E' in url?
	    # Do we need cookie?
	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/meetings/'$thisItem \
		 --header 'Authorization: Bearer '$thisAuth\
#		 --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' \
		 -o $tmp/$thisItem-details.json 
	fi
	gotItem=$(jq --arg TYPE "$thisType" '. | select( (.tracking_fields) != null) | select(.tracking_fields[].value == $TYPE) | .id' $tmp/$thisItem-details.json)
	gotTopic=$(jq --arg TYPE "$thisType" '. | select( (.tracking_fields) != null) | select(.tracking_fields[].value == $TYPE) | .topic'  $tmp/$thisItem-details.json)
	if [[ $gotItem = "" ]] ; then
	    # msg "No $thisType found"
	    # Get rid of this file
	    # mv $tmp/$thisItem-details.json $tmp/$thisItem-details.json-null
	    rm $tmp/$thisItem-details.json
	else
	    msg "Got $gotTopic"
	fi
	
    done < $tmp/meetings.list

}

doCourse()
{
    properName=$1
    msg "Geting recordings for $properName"
    meetingBasics Course
    #

    for file in $tmp/*-details.json;
    do
	thisTopic=$(jq '.topic' $file)
	msg "Deep Work on $thisTopic"
	
	thisLink=$(jq -r -f $thisDir/make.course.links.jq $file)
	theseTimes=$(jq -r '.occurrences[].start_time' $file | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	echo "$thisLink	$theseTimes" >> $justLinks
    done
    sort --version-sort $justLinks > $sortedLinks
    gawk -F '\t' -f $thisDir/zoom.courses.awk $sortedLinks >> $linkFile
    msg "Output file is $linkFile"
}
doClub()
{
    properName=$1
    msg "Geting recordings for $properName"
    meetingBasics Club
    
    for file in $tmp/*-details.json;
    do
	thisTopic=$(jq '.topic' $file)
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f $thisDir/make.zoom.links.jq $file)
	theseTimes=$(jq -r '.occurrences[] | select(.status == "available")  | .start_time ' $file | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	echo "$thisLink $theseTimes" >> $justLlinks
    done
    sort --version-sort just.links.tsv > $sortedLinks
    gawk -F '\t' -f $thisDir/zoom.clubs.awk $sortedLinks >> $linkFile
    msg "Link file is $linkFile"
}
doCommittee()
{
    meetingBasics "Committee Meeting"
    
    for file in $tmp/*-details.json;
    do
	thisTopic=$(jq '.topic' $file)
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f $thisDir/make.zoom.links.jq $file)
	theseTimes=$(jq -r '.occurrences[] | select(.status == "available")  | .start_time ' $file | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	echo "$thisLink $theseTimes" >> $justLlinks
    done
    sort --version-sort just.links.tsv > $sortedLinks
    gawk -F '\t' -f $thisDir/zoom.clubs.awk $sortedLinks >> $linkFile
    msg "Link file is $linkFile"
}
doEvent()
{
    properName=$1
    msg "Geting recordings for $properName"
   
    meetingBasics Event
    
    for file in $tmp/*-details.json;
    do
	thisTopic=$(jq '.topic' $file)
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f $thisDir/make.zoom.links.jq $file)
#	theseTimes=$(jq -r '.occurrences[] | select(.status == "available")  | .start_time ' $file | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	theseTimes=$(jq -r '.start_time ' $file )
	echo "$thisLink $theseTimes" >> $justLlinks
    done
    sort --version-sort just.links.tsv > $sortedLinks
    gawk -F '\t' -f $thisDir/zoom.clubs.awk $sortedLinks >> $linkFile
    msg "Link file is $linkFile"
}
doRecording()
{
    properName=$1
    msg "Geting recordings for $properName"
#    meetingType=$thisMeetingType
    meetingBasics $subType
    for file in $tmp/*-details.json;
    do
	# echo "Getting details for $file"
	thisId=$(jq '.id' $file)
	thisTopic=$(jq '.topic' $file)
	msg "Inspecting this topic: $thisTopic"
	echo $thisId >> $tmp/recording.list
    done
    msg "Fetching recordings..."

    while IFS='' read -r thisMtg ; do
	msg "Munching $thisMtg"
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/meetings/'$thisMtg'/recordings' \
	     --header 'Authorization: Bearer '$thisAuth \
	     --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o $tmp/$thisMtg.recording.json
	msg "Also getting participant detail for $thisMtg"
	# https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardmeetingparticipants
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/metrics/meetings/'$thisMtg'/participants?type=past' \
	     --header 'Authorization: Bearer '$thisAuth \
	     --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o $tmp/$thisMtg.participants.json	
    done < $tmp/recording.list

    for rec in $tmp/*.recording.json;
    do
	# msg "Working on $rec and buiding $justLinks"
	jq -r -f $thisDir/get.zoom.recordings.jq $rec >> $justLinks
	#
    done
    echo "ID,Device,Location,Network Type,Microphone,Camera,Speaker, Version" > $tmp/participants.csv
    for part in $tmp/*participants.json;
    do
	jq -r '. | select(.code == null) | .participants[] | [.user_id, .device, .location,.network_type, .microphone, .speaker, .camera, .version,.ip_address] | @csv ' $part >> $tmp/participants.csv
    done
    # msg "\$linkFile is $linkFile"
    # msg "\$justLinks is $justLinks"
    # $1 is the unix timesamp in $justLinks
    sort -r $justLinks > $tmp/sorted.links.tsv
    gawk -F '\t' -f $thisDir/zoom.recordings.awk $tmp/sorted.links.tsv >> $linkFile
    msg "Output file is $linkFile"
    cp -v $linkFile .
    msg "Partiticapnts\' file is $tmp/partcipants.csv"
    ssconvert $tmp/partcipants.csv participants.xlsx
	    
}

while getopts ":r:t:nhv" opt; do
    case ${opt} in
	r )
	    ### -r Get recordings for Meeting type, see below
	    getAll=true
	    getRecordings=true
	    subType=$OPTARG
	    meetingType=Recordings
	    cmd=Recording
	    getAll=true
#	    echo "Got \$thisMeetingType $thisMeetingType"
	    case "$subType" in
		[Cc]ourse*)
		    ###        Courses
		    subType="Courses"
		;;
		[Cc]ommittee*)
		    ###        Committees
		    subType="Committee Meeting"
		    ;;
		[Ee]vent*)
		    ###        Events
		    subType="Events"
		    ;;
		* )
		    echo "%% Invalid meeting type : $OPTARG"
		    help
		    ;;
	    esac

	;;
	t )
	    ### -t Zoom meeting type
	    meetingType=$OPTARG
	    # matching upper or lower, singular or plural
#	    echo "Got type"
	    case "$meetingType" in
		[Cc]ourse*)
		    ###        Courses
		    thisType="Course"
		    cmd="Course"
		;;
		[Cc]ommittee*)
		    ###        Committees
		    thisType="Committee Meeting"
		    ;;
		[Ee]vent*)
		    ###        Events
		    thisType="Events"
		    cmd=Event
		    getAll=true
		    ;;
		[Cc]lub*)
		    ###        Clubs
		    thisType="Club Meeting"
		    cmd=Club
		    ;;
		* )
		    echo "%% Invalid meeting type : $OPTARG"
		    help
		    ;;
	    esac
	    ;;
	n )
	    ### -n Don't initialize, i.e., don't delete contents of /tmp/zoom
	    init=false
	    ;;
	h )
	    ### -h Print help and exits
	    help
	    ;;
	v )
	    ### -v Set verbose mode
	    verbose="true"
	    ;;
	* )
	    echo "Invalid Option: -$OPTARG" 1>&2
	    exit 1
	    ;;
    esac
done
msg "Will do \$cmd $cmd for \$subType $subType"
setup "$cmd" "$subType"
init "$cmd"
#echo "Got $cmd here"
do$cmd "$thisType"
