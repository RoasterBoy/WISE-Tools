#!/bin/bash
# Parse options to the `zoom` command
set -e
start_time="$(date -u +%s)"
simple=false
download=false
help()
{
    thisScript=$(which "$0")
    sed -rn 's/^\s*### ?//;T;p' "$thisScript"
    exit
}
msg()
{
    if [  "$verbose" = true ];
    then
	msgString=$*
	echo "%% $msgString"
    fi
}
Vmsg()
{
    if [ "$Verbose" = true ];
    then
	msgString=$*
	echo "%% $msgString"
    fi
}
setup()
{
    rptType=$1
    thisDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    thisAuth=$(python $thisDir/get.auth.py)
    justLinks=$tmp/just.links.tsv
    msg "Initializing $justLinks"
    :>"$justLinks"
    sortedLinks=$tmp/sorted.links.tsv
    msg "Doing setup for \$rptType $rptType "
    HTMLFile=$tmp/$rptType.html
    msg "Initializing $HTMLFile"
    :>"$HTMLFile"
    if [[ $simple = "false" ]]; then
	echo "<h2>$rptTitle</h2>" > "$HTMLFile"
    thisDate=$(date  +"%B %d, %Y %-I:%m %p")
    echo "<p>Updated: $thisDate" >> "$HTMLFile"
    fi
}
init()
{
    tmp=~/tmp/zoom
    rptType=$1
    if [[ "$init" = false ]] ; then
	msg "Skipping initialization" 
	return
    fi
    msg "Doing initialization"
    mkdir -p "$tmp"
    touch "$tmp"/tmp.tmp
    rm -r "${tmp:?}"/*
    
}
getHosts()
{
    hostList=$tmp/hosts.list
    hostJSON=$tmp/hosts.json
    curl -s --location --request GET 'https://api.zoom.us/v2/users?status=active&page_size=30' \
	 --header 'Authorization: Bearer '"$thisAuth" \
	 --header 'Cookie: _zm_lang=en-US; cred=E847D55F4DDCDBC0D8EE197899BCB2C9' -o $hostJSON
    jq -r '.users[] | select(.type == 2)  | .id' $hostJSON > $hostList
}
getMeetings()
{
    if [[ "$init" = false ]] ; then
	msg "Skipping update of meeting"
	return
    fi
    if [[ "$getAll" = true ]]; then
	retrieveType="scheduled"
    else
	retrieveType="upcoming"	
    fi
	Vmsg "Getting all meetings that are $retrieveType"
	getHosts # returns $hostList
	while IFS='' read -r thisHost ; do
	    Vmsg "Working on meetings for $thisHost"

	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/users/'"$thisHost"'/meetings?page_size=300&type='$retrieveType \
		 --header 'Authorization: Bearer '"$thisAuth" -o "$tmp"/"$thisHost".info.json 
	done < $hostList
    jq --slurp ' .[] | .meetings[].id' "$tmp"/*info.json  > "$tmp"/all.meetings.list
    sort --unique > "$tmp"/meetings.list < "$tmp"/all.meetings.list
}
meetingBasics()
{
    msg "Working on $trackingField right now"
    msg "Initializing $cmd.list"
    rptTypeList=$tmp/this.list
    :>"$rptTypeList"
    getMeetings
    if [[ "$getAll" = true ]]; then
	showAll="?show_previous_occurrences=true"
    fi
    while IFS='' read -r thisMtg ; do
	if [[ "$init" = false ]] ; then
	    msg "Skipping update of $rptType details"
	else
	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/meetings/'"$thisMtg"$showAll\
		 --header 'Authorization: Bearer '"$thisAuth"\
		 -o "$tmp"/"$thisMtg".details.json 
	fi
	gotItem=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.type.jq "$tmp"/"$thisMtg".details.json)
	gotTopic=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.topic.jq  "$tmp"/"$thisMtg".details.json)
	if [[ $gotItem = "" ]] ; then
	    rm "$tmp"/"$thisMtg".details.json
	else
	    msg "Got $gotTopic"
	    echo "$gotItem" >> "$rptTypeList" 
	fi
	
    done < "$tmp"/meetings.list
    gThisList=$rptTypeList
    echo "Got these: \$gThisList, $gThisList and \$rptTypeList, $rptTypeList"
}

doCourses()
{
    properName=$1
    msg "Geting dates for $properName"
   meetingBasics Course

    for file in "$tmp"/*.details.json;
    do
	thisTopic=$(jq '.topic' "$file")
	Vmsg "Deep Work on $thisTopic"
	if [[ $simple = "true" ]]; then
	    jqFile="$thisDir"/make.simple.course.links.jq
	    theseTimes=""
	else
	    jqFile="$thisDir"/make.course.links.jq
	    theseTimes=$(jq -r '.occurrences[].start_time' "$file" | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	fi
	thisLink=$(jq -r -f "$jqFile" "$file")
	echo "$thisLink	$theseTimes" >> "$justLinks"
    done
    msg "Initializing $sortedLinks"
    :>"$sortedLinks"
    if [[ $simple = "true" ]]; then
	printf "Course\tLink\tHost and CA\tPhone\tMeeting Id\tPasscode\tAlternate Hosts\n" > "$sortedLinks"
	sort --version-sort "$justLinks" >> "$sortedLinks"
	msg "Sorted links are in $sortedLinks"
    else
	sort --version-sort "$justLinks" >> "$sortedLinks"
	gawk -F '\t' -f "$thisDir"/zoom.courses.awk "$sortedLinks" >> "$HTMLFile"
	msg "Output file is $HTMLFile"
    fi
}
doMtg()
{

    meetingBasics $tracingField
    
    for file in "$tmp"/*.details.json;
    do
	thisTopic=$(jq '.topic' "$file")
	msg "Deep Work on $thisTopic"
	thisLink=$(jq -r -f "$thisDir"/make.zoom.links.jq "$file")
	theseTimes=$(jq -r -f "$thisDir"/get.times.jq "$file")
#	echo "$thisLink	$theseTimes" >> "$justLinks"
	echo "$theseTimes	$thisLink" >> "$justLinks"
    done
    
    sort -k2M -k3n "$justLinks" > "$sortedLinks"
    gawk -F '\t' -f "$thisDir"/$awkFile "$sortedLinks" >> "$HTMLFile"
    sed -i "s/  / /g" $HTMLFile
    msg "HTML Link file is $HTMLFile"
}
doRecordings()
{
    msg "Geting recordings for $trackingField"
    getHosts
    meetingBasics 
    if [[ "$gThisList" = "" ]]; then
	echo "Missing global list $gThisList"
	exit
    fi
    since=$(date +%Y-%m-%d -d "30 days ago")
    while IFS='' read -r thisHost; do
	curl -s --request GET \
	     'https://api.zoom.us/v2/users/'"$thisHost"'/recordings?page_size=300&from='$since \
	     --header 'Authorization: Bearer '"$thisAuth" -o "$tmp"/"$thisHost".recordings.json
    done < "$hostList"
    recordingLinks=$tmp/recording.links.tsv
    msg "Initializing $recordingLinks"
    :>$recordingLinks
    downloadLinks=$tmp/download.links.tsv
    msg "Initializing $downloadLinks"
    :>$downloadLinks
    jq -s '.' "$tmp"/*recordings.json > "$tmp"/big.json
    while IFS='' read -r thisItem; do
	jq -r --arg ID "$thisItem"  -f "$thisDir"/get.recording.links.jq "$tmp"/big.json >> "$recordingLinks"
	jq -r --arg ID "$thisItem"  -f "$thisDir"/get.download.links.jq "$tmp"/big.json >> "$downloadLinks"
    done < "$gThisList"
    sort -r "$recordingLinks" > "$sortedLinks"
    gawk -F '\t' -f "$thisDir"/zoom.recordings.awk "$sortedLinks" >> "$HTMLFile"
    msg "Output file is $HTMLFile"
    getParticipants
    if [[ $download = "" ]]; then
	msg "Downloading recordings"
	downloadRecordings
    fi

}
getParticipants()
{
    msg "Getting participants"
    while IFS='' read -r partMtg ; do 
    Vmsg "Also getting participant detail for this meeting: $partMtg"

    curl -s --location --request GET \
	 'https://api.zoom.us/v2/metrics/meetings/'"$partMtg"'/participants?type=past' \
	 --header 'Authorization: Bearer '"$thisAuth" \
	 --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o "$tmp"/"$partMtg".participants.json
    exit
    done < "$gThisList"

    echo "User,Device,Location,Network Type,Microphone,Camera,Speaker, Version, IP" > "$tmp"/participants.csv
    for part in "$tmp"/*participants.json;
    do
	jq -r -f "$thisDir"/get.participant.detail.jq "$part" >> "$tmp"/participants.csv
    done
    msg "Participants' file is $tmp/partcipants.xlsx"
    ssconvert "$tmp"/participants.csv "$tmp"/participants.xlsx    
}
downloadRecordings()
{
    recDir=~/Recordings
    mkdir -p "$recDir"
    while IFS='' read -r thisItem; do
	thisFile=$(echo $thisItem | awk  '{printf "%s-%s.MP4\n", $1, $2}')
	downloadUrl=$(echo $thisItem | awk  '{print $3}')
	if [ ! -f $recDir/$thisFile ]; then
	    wget  --content-disposition -v "$downloadUrl" -O<<EOF $recDir/$thisFile
EOF
	fi
    done    < "$downloadLinks"
}
doParticipation()
{
    msg "Doing Participation"
    :>$tmp/thisParticipation.tsv
    meetingBasics Course

    for file in "$tmp"/*.details.json;
    do
	thisID=$(echo $file | sed -r -e 's/.*([0-9]{11}).*$/\1/g')
	thisTopic=$(jq '.topic' "$file")
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/metrics/meetings/'"$thisID"'/participants?type=past' \
	     --header 'Authorization: Bearer '"$thisAuth"  \
	     -o "$tmp"/"$thisID".participants.json
	thisCount=$(jq -r '.participants[].user_id' "$tmp"/$thisID.participants.json | wc -l)
	printf "%s\t%s\n", "$thisTopic", "$thisCount" >> $tmp/thisParticipation.tsv
    done 
    msg "Participation file is in $tmp/thisParticipation.tsv"
}


while getopts "dr:Pt:nShvV" opt; do
    shopt -s nocasematch
    case ${opt} in
	d )
	    ### -d Download recordings
	    ### TODO make this only valid with -r
	    download=true
	    ;;
	r )
	    getAll=true
	    tmpType=$OPTARG
	    tmpType=${tmpType,,}
	    rptType=Recording
	    case "$tmpType" in
		### -r Zoom recording type
		course*)
		    ###        Courses
		    trackingField="Course"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		;;
		event*)
		    ###        Events
		    trackingField="Event"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    ;;
		committee*)
		    ###        Committee
		    trackingField="Committee Meeting"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    ;;
		training*)
		    ###        Training
		    trackingField="Training Sessions"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    ;;
		* )
		    echo "%% Invalid tracking field for recordngs : $OPTARG"
		    help
		    ;;
	    esac

	    ;;
	S ) # capital S
	    ### -S Simplified output to allow us to use the data in a spreadsheet.
	    simple=true
	    ;;
	P )
	    ### -P  Get course participation stats
	    getAll=true
	    trackingField="Course"
	    rptTitle="Participation for Courses"
	    cmd=Participation
	    ;;
	t )
	    ### -t Zoom meeting type
	    tmpType=$OPTARG
	    tmpType=${tmpType,,}
	    # matching upper or lower, singular or plural
	    msg "Got type $tmpType"
	    case "$tmpType" in
		course*)
		    ###        Courses
		    trackingField="Course"
		    rptTitle="Zoom Links for Courses"
		    cmd=Courses
		;;
		training)
		    ###        Committees
		    trackingField="Training"
		    rptTitle="Zoom Links for Training Sessions"
		    cmd=Mtg
		    awkFile=zoom.clubs.awk
		    rptType=Training
		    ;;
		committee*)
		    ###        Committees
		    trackingField="Committee Meeting"
		    rptTitle="Zoom Links for Committee Meetings"
		    cmd=Mtg
		    awkFile=zoom.clubs.awk
		    rptType=Committees
		    ;;
		event*)
		    ###        Events
		    trackingField="Event"
		    rptTitle="Zoom Links for Events"
		    awkFile=zoom.events.awk
		    cmd=Mtg
		    ;;
		club*)
		    ###        Clubs
		    trackingField="Club Meeting"
		    rptTitle="Zoom Links for Clubs and Groups"
		    cmd=Mtg
		    awkFile=zoom.clubs.awk
		    rptType=Clubs
		    ;;
		sig*)
		    ###        SIG
		    trackingField="SIG"
		    rptTitle="Zoom Links for Special Interest Groups (SIGS)"
		    cmd=Mtg
		    awkFile=zoom.clubs.awk
		    rptType=SIG
		    ;;
		group*)
		    ###        Group
		    trackingField="Group Meeting"
		    rptTitle="Zoom Links for Group Meetings"
		    awkFile=zoom.clubs.awk
		    cmd=Mtg
		    rptType=group
		    ;;		
		* )
		    echo "%% Invalid meeting type : $OPTARG"
		    help
		    ;;
	    esac
	    ;;
	n )
	    ### -n Don't initialize, i.e., don't delete contents of ~/tmp/zoom
	    init=false
	    ;;
	h )
	    ### -h Print help and exits
	    help
	    ;;
	v )
	    ### -v Set verbose mode
	    verbose="true"
	    ;;
	V )
	    ### -V Set extra-verbose mode
	    Verbose="true"
	    ;;
	* )
	    echo "Invalid Option: -$OPTARG" 1>&2
	    exit 1
	    ;;
    esac
done
init "$cmd"
setup "$cmd"
if [[ -z $cmd ]]; then
    echo "%% *Error* - Missing meeting type or recording"
    help
fi
do$cmd $rptType
end_time=$(date -u +%s)
elapsed=$((end_time-start_time))
msg "Elapsed time: $elapsed seconds"
