#!/bin/bash
# TODO Parse options to the `zoom` command
## TIL
## 1/12/21
## When we get this error, it means this
## "The Token's Signature resulted invalid when verified using the Algorithm: HmacSHA256"
## There's a problem with the Zoom Secret in .bashrc
##

set -e
start_time="$(date -u +%s)"
simple=false
download=false
help()
{
    thisScript=$(which "$0")
    sed -rn 's/^\s*### ?//;T;p' "$thisScript"
    exit
}
msg()
{
    if [  "$verbose" = true ];
    then
	msgString=$*
	echo "%% $msgString"
    fi
}
die()
{
    if [ "$Verbose" = true ];
    then
	msgString=$*
	echo "%% $msgString"
    fi
}
setup()
{
    rptType=$1
    thisAuth=$(python3 $thisDir/get.auth.py)
    justLinks=$tmp/just.links.tsv
    msg "Initializing $justLinks"
    :>"$justLinks"
    sortedLinks=$tmp/sorted.links.tsv
    msg "Doing setup for \$rptType $rptType "
    HTMLFile=$tmp/$rptFile
    msg "Initializing $HTMLFile"
    :>"$HTMLFile"
    if [[ $simple = "false" ]]; then
	echo "<h2>$rptTitle</h2>" > "$HTMLFile"
	thisDate=$(date  +"%B %d, %Y %-I:%M %p")
	if [ -v "$thisNote" ]; then
	    echo "<b>*** $thisNote ***</b>" >> $HTMLFile
	fi
    echo "<p>Updated: $thisDate" >> "$HTMLFile"
    fi
}
init()
{
    tmp=~/tmp/zoom
    if [[ "$init" = false ]] ; then
	msg "Skipping initialization" 
	return
    fi
    msg "Doing initialization"
    mkdir -p "$tmp"
    touch "$tmp"/tmp.tmp
    rm -r "${tmp:?}"/*
    
}
getHosts()
{
    hostList=$tmp/hosts.list
    :>$hostList
    msg "Getting hosts"
    curl -s --location --request GET 'https://api.zoom.us/v2/users?status=active&page_size=30' \
	 --header 'Authorization: Bearer '"$thisAuth" -o hosts.json
	jq -r '.users[] | select(.type == 2)  | .id' hosts.json > $hostList
    msg "Got hosts"
}
getMeetings()
{
    if [[ "$init" = false ]] ; then
	msg "Skipping update of meeting"
	return
    fi
    if [[ "$getAll" = true ]]; then
	retrieveType="scheduled"
    else
	retrieveType="upcoming"	
    fi
	getHosts # returns $hostList
	while IFS='' read -r thisHost ; do
	    msg "Working on meetings for $thisHost"
	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/users/'"$thisHost"'/meetings?page_size=300&type='$retrieveType \
		 --header 'Authorization: Bearer '"$thisAuth" -o "$tmp"/"$thisHost".info.json 
	done < $hostList
    jq --slurp ' .[] | .meetings[].id' "$tmp"/*info.json  > "$tmp"/all.meetings.list
    sort --unique > "$tmp"/meetings.list < "$tmp"/all.meetings.list
}
meetingBasics()
{
    msg "Working on \$trackingField $trackingField"
    msg "Initializing $cmd.list"
    rptTypeList=$tmp/this.list
    :>"$rptTypeList"
    getMeetings
    if [[ "$getAll" = true ]]; then
	showAll="?show_previous_occurrences=true"
    fi
    while IFS='' read -r thisMtg ; do
	if [[ "$init" = false ]] ; then
	    msg "Skipping update of $rptType details"
	else
	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/meetings/'"$thisMtg"$showAll\
		 --header 'Authorization: Bearer '"$thisAuth"\
		 -o "$tmp"/"$thisMtg".details.json 
	fi
	gotItem=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.type.jq "$tmp"/"$thisMtg".details.json)
	gotTopic=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.topic.jq  "$tmp"/"$thisMtg".details.json)
	if [[ $gotTopic = "" ]] ; then
#	    rm "$tmp"/"$thisMtg".details.json
    	    mv "$tmp"/"$thisMtg".details.json  "$tmp"/"$thisMtg".nope.json
	else
#	    msg "Got \$gotTopic $gotTopic and \$gotItem $gotItem"
	    echo "$gotItem" >> "$rptTypeList" 
	fi
#	gotItem=""
#	gotTopic=""
    done < "$tmp"/meetings.list
    gThisList=$rptTypeList
}

doCourses()
{
    properName=$1
    msg "Geting dates for $properName"
    meetingBasics Course

    for file in "$tmp"/*.details.json;
    do
	thisTopic=$(jq '.topic' "$file")
	if [[ $simple = "true" ]]; then
	    jqFile="$thisDir"/make.simple.course.links.jq
	    theseTimes=""
	else
	    jqFile="$thisDir"/make.course.links.jq
	    theseTimes=$(jq -r '.occurrences[].start_time' "$file" | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	fi
	thisLink=$(jq -r -f "$jqFile" "$file")
	echo "$thisLink	$theseTimes" >> "$justLinks"
    done
    msg "Initializing $sortedLinks"
    :>"$sortedLinks"
    if [[ $simple = "true" ]]; then
	printf "Course\tLink\tHost and CA\tPhone\tMeeting Id\tPasscode\tAlternate Hosts\n" > "$sortedLinks"
	sort --version-sort "$justLinks" >> "$sortedLinks"
	msg "Sorted links are in $sortedLinks"
    else
	sort --version-sort "$justLinks" >> "$sortedLinks"
	gawk -F '\t' -f "$awkFile" "$sortedLinks" >> "$HTMLFile"
	msg "Output file is $HTMLFile"
	push.to.wa.sh -l $HTMLFile

    fi
}
doMtg()
{

    meetingBasics $tracingField
    
    if compgen -G "$tmp"/*.details.json;
    then
#	msg "Got some files"
	for file in "$tmp"/*.details.json;
	do
	    ### TODO
	    ### We need to pick out the sessions that aren't deleted.
	    # This sequence does part of it, but now we need to work it into the main flow. 
	    # .occurrences[] | if (.status == "available") then .start_time else empty end
	    # 
	    thisTopic=$(jq '.topic' "$file")
	    msg "Deep Work on $thisTopic"
	    thisLink=$(jq -r -f "$thisDir"/make.zoom.links.jq "$file")
	    theseTimes=$(jq -r -f "$thisDir"/get.times.jq "$file")
	    echo "$thisLink	$theseTimes" >> "$justLinks"
	    #	echo "$theseTimes	$thisLink" >> "$justLinks"
	done
    else
	echo "No $trackingField meetings scheduled."
	return 1
    fi

    sort -t$'\t' -k8 $tmp/just.links.tsv > "$sortedLinks"
    gawk -F '\t' -f $awkFile "$sortedLinks" >> "$HTMLFile"
    sed -i "s/  / /g" $HTMLFile
    msg "HTML Link file is $HTMLFile"
    sed -ibak 's/\xE2\x80\x99/\&rsquo;/g' $HTMLFile
    push.to.wa.sh -l $HTMLFile
}
doRecordings()
{
    recDir=~/Recordings
    msg "Geting recordings for $trackingField"
    since=$(date +%Y-%m-%d -d "30 days ago")
#    since="2021-02-01"

    curl -s --request GET \
	 --url 'https://api.zoom.us/v2/metrics/meetings?include_fields=tracking_fields&page_size=150&from='$since'&type=past' \
	 --header 'authorization: Bearer '"$thisAuth" > this.json
    jq --raw-output --arg TF "$trackingField" '.meetings[] | select (.tracking_fields != null) |. |select(.tracking_fields[].value == $TF) | [.start_time,.uuid, .topic ]| @tsv' this.json > this.tsv
     while IFS='	' read -r thisTime thisUUID thisTopic ; do
	 #    echo "This is the UUID $thisUUID"
	 i=$((i+1))
	 curl -s --request GET \
	      --header 'authorization: Bearer '"$thisAuth" \
	      --url 'https://api.zoom.us/v2/meetings/'"$thisUUID"'/recordings' > $i.json
	 code=$(jq '.code' $i.json)
	 if [[ $code == "null" ]]; then 
	     jq -r ' select(. != .code) | [ (.recording_files[] | select( any(. == "MP4" ) ) | (.recording_start | fromdate), .play_url, .download_url),.topic] | @tsv' $i.json > $i.tsv
	     dlFile=$(awk -F'\t' '{print $3}' $i.tsv)
	     recFile=$(awk -F'\t' '{gsub(/ |\./,"-",$1);printf "'%.*s'-", 10, $1; print strftime("%Y-%m-%d-%H-%M", $2)".mp4"}' $i.tsv )
	     cat $i.tsv >> $justLinks

	     getParticipants $thisUUID "$recFile"
	     
	     # Next we need to decide if we're going to do downloads or not.
	     # For now, it's commented out.
	     #   if [[ $download ]]; then

	     if [ ! -f "$recDir/recFile" ]; then
		 #		 touch $recDir/$recFile
		 msg "Would be doing downloads here."
		 #	wget -nv $dlFile -O $recDir/$recFile
		 #	echo "Touching $recDir/recFile"
	     fi
	     #   fi
	 fi
     done < this.tsv
     echo "User,Join Time,Location,Network Type,Microphone,Camera,Speaker, Version, IP" > "$tmp"/participants.csv
     rptParticipants
     sort -r "$justLinks" > "$sortedLinks"
     gawk -F '\t' -f "$awkDir"/zoom.recordings.awk "$sortedLinks" >> "$HTMLFile"
     msg "Output file is $HTMLFile"
     sed -ibak 's/\xE2\x80\x99/\&rsquo;/g' $HTMLFile
     push.to.wa.sh -l $HTMLFile
}
rptParticipants()
{
    for part in "$tmp"/*participants.json;
    do
	jq -r -f "$thisDir"/get.participant.detail.jq "$part" >> "$tmp"/participants.csv
    done
    msg "Participants' file is $tmp/partcipants.xlsx"
    ssconvert "$tmp"/participants.csv "$tmp"/participants.xlsx    

}
getParticipants()
{
    partMtg="$1"
    local thisFile="$2"
    msg "Getting participants for $partMtg"
    #
    curl -s --location --request GET \
	 'https://api.zoom.us/v2/metrics/meetings/'"$partMtg"'/participants?type=past' \
	 --header 'Authorization: Bearer '"$thisAuth" \
	 --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o "$tmp"/"$thisFile".participants.json
#    exit

}
downloadRecordings()
{
    # TODO Put the recordings in a shared space (Dropbox/WISE/Recordings/"
    recDir=~/Recordings
    mkdir -p "$recDir"
    while IFS='' read -r thisItem; do
	jq -r --arg ID "$thisItem"  -f "$thisDir"/get.download.links.jq "$tmp"/big.json >> "$downloadLinks"
    done < "$gThisList"
    while IFS='' read -r thisItem; do
	thisFile=$(echo $thisItem | awk  '{printf "%s-%s.MP4\n", $1, $2}')
	downloadUrl=$(echo $thisItem | awk  '{print $3}')
	if [ ! -f $recDir/$thisFile ]; then
	    wget  --content-disposition -v "$downloadUrl" -O  $recDir/$thisFile
	fi
    done < "$downloadLinks"
}
doParticipation()
{
    msg "Doing Participation"
    :>$tmp/thisParticipation.tsv
    meetingBasics Course

    for file in "$tmp"/*.details.json;
    do
	thisID=$(echo $file | sed -r -e 's/.*([0-9]{11}).*$/\1/g')
	thisTopic=$(jq '.topic' "$file")
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/metrics/meetings/'"$thisID"'/participants?type=past' \
	     --header 'Authorization: Bearer '"$thisAuth"  \
	     -o "$tmp"/"$thisID".participants.json
	thisCount=$(jq -r '.participants[].user_id' "$tmp"/$thisID.participants.json | wc -l)
	printf "%s\t%s\n", "$thisTopic", "$thisCount" >> $tmp/thisParticipation.tsv
    done 
    msg "Participation file is in $tmp/thisParticipation.tsv"
}


while getopts "n:dr:Pt:nShvV" opt; do
    shopt -s nocasematch
    #
    # Setting up some variables that we'll use for paths and files
    #
    thisDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    awkDir=$thisDir/awk
    jqDir=$thisDir/jq
    #
    case ${opt} in
	d )
	    ### -d Download recordings
	    # TODO: make this only valid with -r
	    download=true
	    ;;
	n )
	    ### -n "Add note to the start of the report page. Must be quoted string"
	    thisNote="$OPTARG"
	    ;;
	r )
	    getAll=true
	    tmpType=${OPTARG,,} # Use parameter substituion to convert $tmpType to lowercase for easier matching
	    rptType=Recording
	    case "$tmpType" in
		### -r Zoom recording type
		course*)
		    ###        Courses
		    trackingField="Course"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=CourseRecordings.html
		;;
		event*)
		    ###        Events
		    trackingField="Event"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=EventRecordings.html
		    ;;
		committee*)
		    ###        Committee
		    trackingField="Committee Meeting"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=CommitteeRecordings.html
		    ;;
		training*)
		    ###        Training
		    trackingField="Training"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=TrainingRecordings.html				    
		    ;;
		* )
		    echo "%% Invalid tracking field for recordngs : $OPTARG"
		    help
		    ;;
	    esac

	    ;;
	S ) # capital S
	    ### -S Simplified output to allow us to use the data in a spreadsheet.
	    simple=true
	    ;;
	P )
	    ### -P  Get course participation stats
	    getAll=true
	    trackingField="Course"
	    rptTitle="Participation for Courses"
	    cmd=Participation
	    ;;
	t )
	    ### -t Zoom meeting type
	    tmpType=$OPTARG
	    tmpType=${tmpType,,}
	    # matching upper or lower, singular or plural
	    msg "Got type $tmpType"
	    case "$tmpType" in
		course*)
		    ###        Courses
		    trackingField="Course"
		    rptTitle="Zoom Links for Courses"
		    awkFile=$awkDir/zoom.courses.awk
		    cmd=Courses
		    rptFile=Courses.html
		;;
		training)
		    ###        Committees
		    trackingField="Training"
		    rptTitle="Zoom Links for Training Sessions"
		    cmd=Mtg
		    rptFile=Training.html
		    awkFile=$awkDir/zoom.events.awk
		    rptType=Training
		    ;;
		committee*)
		    ###        Committees
		    trackingField="Committee Meeting"
		    rptTitle="Zoom Links for Committee Meetings"
		    cmd=Mtg
		    rptFile=Committee.html
		    awkFile=$awkDir/zoom.clubs.awk
		    rptType=Committees
		    ;;
		event*)
		    ###        Events
		    trackingField="Event"
		    rptTitle="Zoom Links for Events"
		    awkFile=$awkDir/zoom.events.awk
		    cmd=Mtg
		    rptFile=Events.html
		    ;;
		club*)
		    ###        Clubs
		    trackingField="Club Meeting"
		    rptTitle="Zoom Links for Clubs and Groups"
		    cmd=Mtg
		    awkFile=$awkDir/zoom.clubs.awk
		    rptType=Clubs
		    rptFile=Clubs.html
		    ;;
		sig*)
		    ###        SIG
		    trackingField="SIG"
		    rptTitle="Zoom Links for Special Interest Groups (SIGS)"
		    cmd=Mtg
		    awkFile=$awkDir/zoom.clubs.awk
		    rptType=SIG
		    rptFile=SIGs.html
		    ;;
		group*)
		    ###        Group
		    trackingField="Group Meeting"
		    rptTitle="Zoom Links for Group Meetings"
		    awkFile=$awkDir/zoom.clubs.awk
		    cmd=Mtg
		    rptType=group
		    rptFile=Groups.html
		    ;;		
		* )
		    echo "%% Invalid meeting type : $OPTARG"
		    help
		    ;;
	    esac
	    ;;
	n )
	    ### -n Don't initialize, i.e., don't delete contents of ~/tmp/zoom
	    init=false
	    ;;
	h )
	    ### -h Print help and exit
	    help
	    ;;
	v )
	    ### -v Set verbose mode
	    verbose="true"
	    ;;
	* )
	    echo "Invalid Option: -$OPTARG" 1>&2
	    exit 1
	    ;;
    esac
done
init "$cmd"
setup "$cmd"
if [[ -z $cmd ]]; then
    echo "%% *Error* - Missing meeting type or recording"
    help
fi
do$cmd "$rptType"
#
end_time=$(date -u +%s)
elapsed=$((end_time-start_time))
msg "Elapsed time: $elapsed seconds"
