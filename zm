#!/bin/bash
###
## TODO # This resource  may help us parse commands: https://github.com/sigoden/argc
## TODO # And this: https://miller.readthedocs.io/en/latest/
## TODO # Parse options to the `zoom` command
## TODO # Figure out what to do when there are multiple recordings on the same day
## TODO # Add -since parameter to fetch more than 30 days of recordings
## TODO # Do something reasonsble when there are no courses. Right now, script fails
## TODO # Document theory of operations, how this works.
## TODO # Group recordings page by course, then date. 
## TODO # Sort course links by date, printing only next course
## TODO # Maybe delete working directory in \$tmp if successful? Add -K to inhbit this?
### 
#
## TIL
## 1/12/21
## When we get this error, it means this
## "The Token's Signature resulted invalid when verified using the Algorithm: HmacSHA256"
## There's a problem with the Zoom Secret in .bashrc
##
### Use zmtmp system variable to set location of \$tmp
### Use zmarchive system variable to set location of \$recDir
trap "rm -vf  hosts.json " EXIT
# Keeping this.* for now
set -e
SECONDS=0
simple=false
download=false
publish=true
init=true
help()
{
    thisScript=$(which "$0")
    sed -rn 's/^\s*### ?//;T;p' "$thisScript"
    exit
}
todo()
{
    thisScript=$(which "$0")
    sed -rn 's/^\s*## TODO ?//;T;p' "$thisScript"
    exit
}
msg()
{
    if [  "$verbose" = true ];
    then
	msgString=$*
	echo "%% $msgString"
    fi
}
die()
{
    if [ "$Verbose" = true ];
    then
	msgString=$*
	echo "%% $msgString"
    fi
}
setup()
{
    rptType=$1
    thisAuth=$(python3 $thisDir/get.auth.py)
    justLinks=$tmp/just.links.tsv
    msg "Initializing $justLinks"
    :>"$justLinks"
    sortedLinks=$tmp/sorted.links.tsv
    msg "Doing setup for \$rptType $rptType "
    HTMLFile=$tmp/$rptFile
    msg "Initializing $HTMLFile"
    :>"$HTMLFile"
    if [[ $simple = "false" ]]; then
	echo "<link href="https://sf.wildapricot.org/BuiltTheme/tinted_tiles_partly_cloudy.v3.0/current/3a1388a7/styles/combined.css" rel="stylesheet" type="text/css">" > $HTMLFile
	echo "<style>body {margin-left: 30px;}</style>" >> $HTMLFile
	echo "<img src='/resources/Pictures/WISE-Logos/WISE-Logo-Full-Name.png'/>" >> $HTMLFile
	echo "<p>Return to the  <a href="https://assumptionwise.org">WISE Home page</a>" >> $HTMLFile
	echo "<h2>$rptTitle</h2>" >> "$HTMLFile"
	thisDate=$(date  +"%B %d, %Y %-I:%M %p")
	if [ -n "$thisNote" ]; then
	    msg "Got a note"
	    echo "<b>*** $thisNote ***</b>" >> $HTMLFile
	fi
    echo "<p>Updated: $thisDate" >> "$HTMLFile"
    fi
}
init()
{
    if [ -z ${zmtmp+x} ]; then 
	tmp=~/tmp/"$rptType-$(date -u +%s)"
    else
	tmp="$zmtmp"
    fi
    if [[ "$init" = false ]] ; then
	msg "Skipping initialization" 
	return
    fi
    msg "Doing initialization"
    mkdir -p "$tmp"
    touch "$tmp"/tmp.tmp
    rm -r "${tmp:?}"/*
    
}

getHosts()
{
    hostList=$tmp/hosts.list
    :>$hostList
    msg "Getting hosts"
    curl -s --location --request GET 'https://api.zoom.us/v2/users?status=active&page_size=30' \
	 --header 'Authorization: Bearer '"$thisAuth" -o hosts.json
	jq -r '.users[] | select(.type == 2)  | .id' hosts.json > $hostList
    msg "Got hosts"
}
getMeetings()
{
    if [[ "$init" = false ]] ; then
	msg "Skipping update of meeting"
	return
    fi
    if [[ "$getAll" = true ]]; then
	retrieveType="scheduled"
    else
	retrieveType="upcoming"	
    fi
	getHosts # returns $hostList
	while IFS='' read -r thisHost ; do
	    # Removing some noise
	    # msg "Working on meetings for $thisHost"
	    curl -s --location --request GET \
		 'https://api.zoom.us/v2/users/'"$thisHost"'/meetings?page_size=300&type='$retrieveType \
		 --header 'Authorization: Bearer '"$thisAuth" -o "$tmp"/"$thisHost".info.json 
	done < $hostList
    jq --slurp ' .[] | .meetings[].id' "$tmp"/*info.json  > "$tmp"/all.meetings.list
    sort --unique > "$tmp"/meetings.list < "$tmp"/all.meetings.list
}
meetingBasics()
{
    msg "Working on \$trackingField $trackingField"
    msg "Initializing $cmd.list"
    rptTypeList=$tmp/this.list
    :>"$rptTypeList"
    getMeetings
    if [[ "$getAll" = true ]]; then
	showAll="?show_previous_occurrences=true"
    fi
    if compgen -G "/tmp/*" > /dev/null; then
	while IFS='' read -r thisMtg ; do
	    if [[ "$init" = false ]] ; then
		msg "Skipping update of $rptType details"
	    else
		curl -s --location --request GET \
		     'https://api.zoom.us/v2/meetings/'"$thisMtg"$showAll\
		     --header 'Authorization: Bearer '"$thisAuth"\
		     -o "$tmp"/"$thisMtg".details.json
	    fi
	    gotItem=$(jq --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.type.jq "$tmp"/"$thisMtg".details.json)
	    gotTopic=$(jq  --arg TYPE "$trackingField" -f "$thisDir"/get.zoom.topic.jq  "$tmp"/"$thisMtg".details.json)
	    if [[ $gotTopic = "" ]] ; then
		#	    if [[ $keepDetail = true ]]; then
		# Leaving next line for debugging purposes
    		mv "$tmp"/"$thisMtg".details.json  "$tmp"/"$thisMtg".nope.json
#	    else
#		rm "$tmp"/"$thisMtg".details.json
#	    fi
	    else
		echo "$gotItem" >> "$rptTypeList" 
	    fi
	done < "$tmp"/meetings.list
    else
	msg "No $rptType files found"
	exit
    fi
}

doCourses()
{
    properName=$1
    msg "Geting dates for $properName"
    meetingBasics Course

    for file in "$tmp"/*.details.json;
    do
	thisTopic=$(jq '.topic' "$file")
	if [[ $simple = "true" ]]; then
	    jqFile="$thisDir"/make.simple.course.links.jq
	    theseTimes=""
	else
	    jqFile="$thisDir"/make.course.links.jq
	    theseTimes=$(jq -r '.occurrences[] | if .status == "deleted" then  empty else .start_time  end' "$file" | xargs -I DATE date -d "DATE" +"%B %d %-I:%M %p" | xargs -I TIME printf "\t%s" TIME)
	fi
	thisLink=$(jq -r -f "$jqFile" "$file")
	echo "$thisLink	$theseTimes" >> "$justLinks"
    done
    msg "Initializing $sortedLinks"
    :>"$sortedLinks"
    if [[ $simple = "true" ]]; then
	printf "Course\tLink\tHost and CA\tPhone\tMeeting Id\tPasscode\tAlternate Hosts\n" > "$sortedLinks"
	sort --version-sort "$justLinks" >> "$sortedLinks"
	msg "Sorted links are in $sortedLinks"
    else
	sort --version-sort "$justLinks" >> "$sortedLinks"
	gawk -F '\t' -f "$awkFile" "$sortedLinks" >> "$HTMLFile"

	# Make sure we handle entities properly, editing in place
	recode utf8..ascii  "$HTMLFile"
	msg "Output file is $HTMLFile"
	echo "<hr/>" >> $HTMLFile
	if $publish; 
	   then
	       wafiles -l $HTMLFile
	fi

    fi
}
doMtg()
{

    meetingBasics $tracingField
    
    if compgen -G "$tmp"/*.details.json;
    then
	for file in "$tmp"/*.details.json;
	do
	    thisTopic=$(jq '.topic' "$file")
	    msg "Deep Work on $thisTopic"
	    thisURL=$(jq -r '.registration_url' $file)
	    if [  $thisURL = "null" ]; then
		thisURL=$(jq -r '.join_url' $file)
	    fi
	    ## TODO # do something reasonable if there is no telephone number. right now, it kicks an error 
	    thisLink=$(jq -r --arg URL $thisURL -f "$thisDir"/make.registration.links.jq "$file")
	    theseTimes=$(jq -r -f "$thisDir"/get.times.jq "$file")
	    echo "$thisLink	$theseTimes" >> "$justLinks"
	done
	sort -t$'\t' -k8 $tmp/just.links.tsv > "$sortedLinks"
	gawk -F '\t' -f $awkFile "$sortedLinks" >> "$HTMLFile"
	sed -i "s/  / /g" $HTMLFile
	recode utf8..ascii  "$HTMLFile"
	else
	echo "<p>No "$trackingField"s scheduled." >> $HTMLFile
    fi
    msg "HTML Link file is $HTMLFile"
    echo "<hr/>" >> $HTMLFile
    if $publish; then
       wafiles -l $HTMLFile
    fi
    
}
dblEncode()
{
    echo $1
    that=$(urlencode $1)
    echo $that
    other=$(urlencode $that)
    echo $other
}
patchRecordings()
{
    thisMtg=$1
    curl -s --request PATCH \
	 -H "Content-Type: application/json" \
	 -d '{"viewer_download": true}' \
         --url 'https://api.zoom.us/v2/meetings/'"$thisMtg"'/recordings/settings' \
         --header 'authorization: Bearer '"$thisAuth" > $tmp/$thisMtg.update.txt
}
doRecordings()
{
    if [ -z ${zmarchive+x} ]; then 
	recDir=/archives/Recordings
    else
	recDir="$zmarchive"
    fi
    msg "Geting recordings for $trackingField"
    since=$(date +%Y-%m-%d -d "60 days ago")
#    since="2021-02-01"

    curl -s --request GET \
	 --url 'https://api.zoom.us/v2/metrics/meetings?include_fields=tracking_fields&page_size=150&from='$since'&type=past' \
	 --header 'authorization: Bearer '"$thisAuth" -o $tmp/this.json
    jq --raw-output --arg TF "$trackingField" '.meetings[] | select (.tracking_fields != null) |. |select(.tracking_fields[].value == $TF) | [.start_time,.uuid, .topic ]| @tsv' $tmp/this.json > $tmp/this.tsv

    jq --raw-output --arg TF "$trackingField" '.meetings[] | select (.tracking_fields != null) |. |select(.tracking_fields[].value == $TF) | .id ' $tmp/this.json > $tmp/IDs.txt
    while IFS='' read -r thisMtg;
    do
	patchRecordings $thisMtg
    done < $tmp/IDs.txt

    while IFS='	' read -r thisTime thisUUID thisTopic ; do
	 i=$((i+1))
	 dblEncode $thisUUID
	 curl -s --request GET \
	      --header 'authorization: Bearer '"$thisAuth" \
	       --url 'https://api.zoom.us/v2/meetings/'"$other"'/recordings' > $tmp/$i.json
	 code=$(jq '.code' $tmp/$i.json)
	 if [[ $code == "null" ]]; then 
	     jq -r ' select(. != .code) | [ (.recording_files[] | select( any(. == "MP4" ) ) | (.recording_start | fromdate), .play_url, .download_url),.topic] | @tsv' $tmp/$i.json > $tmp/$i.tsv
	     dlFile=$(awk -F'\t' '{print $3}' $tmp/$i.tsv)
	     # Build file name from Course ID and date of recording
	     if [[ $trackingField = "Course" ]];
		then 
		    recFile=$(gawk -F'\t' 'match($4,/([A-D,S][0-9]*)/,a) {printf "%s-", a[1]}; {print strftime("%Y-%m-%d-%H-%M", $1)".mp4"}' $tmp/$i.tsv)
	     else
		 recFile=$(gawk -F'\t' 'match($4,/(\w*)/,a) {printf "%s-", a[1]}; {print strftime("%Y-%m-%d-%H-%M", $1)".mp4"}' $tmp/$i.tsv)
		 
		 echo $recFile
	     fi
	     cat $tmp/$i.tsv >> $justLinks

	     getParticipants $thisUUID "$recFile"
	     rptParticipants "$other"
	     # Doing downloads. 

	     ## TODO # check if there's enough space before downloading. Exit with message and ?email
	     ## TODO # Backup archives to OneDrive, Dropbox
	     if [ -e "$recDir/$recFile" ]; then
		 msg "No need to download $recDir/$recFile"
	     else
		 if [ "$doArchive" == true ]; then
		     msg "Downloading $recDir/$recFile ..."
		     wget -q $dlFile -O $recDir/$recFile
		 fi
	     fi
	 fi
     done < $tmp/this.tsv

	if [ -s $justLinks ]; then 
	    sort -r "$justLinks" > "$sortedLinks"
	    gawk -F '\t' -f "$awkDir"/zoom.recordings.awk "$sortedLinks" >> "$HTMLFile"
	   else
	       echo "<p>No recordings for $trackingField at this time" >> $HTMLFile
	fi
	    msg "Output file is $HTMLFile"
#	    sed -ibak 's/\xE2\x80\x99/\&rsquo;/g' $HTMLFile
	    echo "<hr/>" >> $HTMLFile
	    recode utf8..ascii $HTMLFile
	    echo $publish
	    if $publish; then
	       wafiles  -l $HTMLFile
	    fi

}
getParticipants()
{
    #
    ## TODO # Needs fixing. See participants  script
    #
    partFile=$other.participants
    partMtg="$1"
    local thisFile="$2"
    msg "Getting participants for $partMtg"
    curl -s --location --request GET \
	 'https://api.zoom.us/v2/metrics/meetings/'"$partMtg"'/participants?type=past&page_size=200' \
	 --header 'Authorization: Bearer '"$thisAuth" \
	 --header 'Cookie: _zm_lang=en-US; cred=DF1D1094C925352ECFFAE5C05E468CA4' -o "$tmp"/"$partFile".json

}
rptParticipants()
{
    local thisSession=${1%.mp4}.participants
#     for part in "$tmp"/*participants.json;
    #     do
	 thisCSV=$thisSession.csv
    jq --arg FILE  $part -r -f "$thisDir"/get.participant.detail.jq "$tmp"/"$thisSession".json > "$tmp"/"$thisCSV"
#     done
	 sort -u -t, -k1,1 $tmp/$thisCSV -o $tmp/$thisCSV
	 sed -i '1 i\"User,Location,Network Type, Version, IP"'  "$tmp"/"$thisCSV"
	 msg "Participants' file is $tmp/"$thisSession".xlsx"
	 ssconvert "$tmp"/"$thisSession".csv "$tmp"/"$thisSession".xlsx
}
doParticipation()
{
    msg "Doing Participation"
    :>$tmp/thisParticipation.tsv
    meetingBasics Course

    for file in "$tmp"/*.details.json;
    do
	thisID=$(echo $file | sed -r -e 's/.*([0-9]{11}).*$/\1/g')
	thisTopic=$(jq '.topic' "$file")
	curl -s --location --request GET \
	     'https://api.zoom.us/v2/metrics/meetings/'"$thisID"'/participants?type=past' \
	     --header 'Authorization: Bearer '"$thisAuth"  \
	     -o "$tmp"/"$thisID".participants.json
	thisCount=$(jq -r '.participants[].user_id' "$tmp"/$thisID.participants.json | wc -l)
	printf "%s\t%s\n", "$thisTopic", "$thisCount" >> $tmp/thisParticipation.tsv
    done 
    msg "Participation file is in $tmp/thisParticipation.tsv"
}


while getopts "aKNn:dr:Pt:TnShvV" opt; do
#    shopt -s nocasematch
    #
    # Setting up some variables that we'll use for paths and files
    #
    thisDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    awkDir=$thisDir/awk
    jqDir=$thisDir/jq
    case ${opt} in
	a )
	    ### -a Archive recordings. Useful only with -r; ignored with other options.
	    doArchive=true
	    ;;
	K )
	    ### -K keep temporary json meeting files (for debugging)
	    keepDetails=true
	    ;;
	d )
	    ### -d Download recordings
	    ## TODO: make the 'd' option only valid with -r
#	    download=true
	    ;;
	n )
	    ### -n "Add note to the start of the report page. Must be quoted string"
	    thisNote="$OPTARG"
	    ;;
	N )
	    ### -N don't publish output; we're testing stuff.
	    publish=false
	    ;;
	r )
	    getAll=true
	    tmpType=${OPTARG,,} # Use parameter substituion to convert $tmpType to lowercase for easier matching
	    rptType=Recording
	    case "$tmpType" in
		### -r Zoom recording type
		course*)
		    ###        Courses
		    trackingField="Course"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=CourseRecordings.html
		;;
		event*)
		    ###        Events
		    trackingField="Event"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=EventRecordings.html
		    ;;
		committee*)
		    ###        Committee
		    trackingField="Committee Meeting"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=CommitteeRecordings.html
		    ;;
		training*)
		    ###        Training
		    trackingField="Training"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=TrainingRecordings.html				    
		    ;;
		summer*)
		    ###        Summer
		    trackingField="Summer"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=SummerRecordings.html				    
		    ;;
		sig**)
		    ###        SIGs
		    trackingField="SIG"
		    rptTitle="$trackingField Recordings"
		    cmd=Recordings
		    rptFile=SIGRecordings.html				    
		    ;;
		* )
		    echo "%% Invalid tracking field for recordngs : $OPTARG"
		    help
		    ;;
	    esac

	    ;;
	S ) # capital S
	    ### -S Simplified output to allow us to use the data in a spreadsheet.
	    simple=true
	    ;;
	P )
	    ### -P  Get course participation stats
	    getAll=true
	    trackingField="Course"
	    rptTitle="Participation for Courses"
	    cmd=Participation
	    ;;
	T )
	    ### -T Displays TODO items
	    #
	    todo
	    ;;
	t )
	    ### -t Zoom meeting type
	    tmpType=$OPTARG
	    tmpType=${tmpType,,}
	    # matching upper or lower, singular or plural
	    msg "Got type $tmpType"
	    case "$tmpType" in
		course*)
		    ###        Courses
		    trackingField="Course"
		    rptTitle="Zoom Links for Courses"
		    awkFile=$awkDir/zoom.courses.awk
		    cmd=Courses
		    rptFile=Courses.html
		    rptType=Courses
		;;
		summer*)
		    ###        Summer 
		    trackingField="Summer"
		    rptTitle="Zoom Links for Summer Courses"
		    awkFile=$awkDir/zoom.courses.awk
		    cmd=Courses
		    rptFile=Summer.Courses.html
		    rptType=Courses
		;;
		training)
		    ###        Training
		    trackingField="Training"
		    rptTitle="Zoom Links for Training Sessions"
		    cmd=Mtg
		    rptFile=Training.html
		    awkFile=$awkDir/zoom.events.awk
		    rptType=Training
		    ;;
		committee*)
		    ###        Committees
		    trackingField="Committee Meeting"
		    rptTitle="Zoom Links for Committee Meetings"
		    cmd=Mtg
		    rptFile=Committee.html
		    awkFile=$awkDir/zoom.clubs.awk
		    rptType=Committees
		    ;;
		event*)
		    ###        Events
		    trackingField="Event"
		    rptTitle="Zoom Links for Events"
		    awkFile=$awkDir/zoom.events.awk
		    cmd=Mtg
		    rptFile=Events.html
		    rptType=Events
		    ;;
		club*)
		    ###        Clubs
		    trackingField="Club Meeting"
		    rptTitle="Zoom Links for Clubs and Groups"
		    cmd=Mtg
		    awkFile=$awkDir/zoom.clubs.awk
		    rptType=Clubs
		    rptFile=Clubs.html
		    ;;
		sig*)
		    ###        SIG
		    trackingField="SIG"
		    rptTitle="Zoom Links for Special Interest Groups (SIGS)"
		    cmd=Mtg
		    awkFile=$awkDir/zoom.clubs.awk
		    rptType=SIG
		    rptFile=SIGs.html
		    ;;
		group*)
		    ###        Group
		    trackingField="Group Meeting"
		    rptTitle="Zoom Links for Group Meetings"
		    awkFile=$awkDir/zoom.clubs.awk
		    cmd=Mtg
		    rptType=group
		    rptFile=Groups.html
		    ;;		
		* )
		    echo "%% Invalid meeting type : $OPTARG"
		    help
		    ;;
	    esac
	    ;;
	n )
	    ### -n Don't initialize, i.e., don't delete contents of ~/tmp/zoom
	    init=false
	    ;;
	h )
	    ### -h Print help and exit
	    help
	    ;;
	v )
	    ### -v Set verbose mode
	    verbose="true"
	    ;;
	* )
	    echo "Invalid Option: -$OPTARG" 1>&2
	    exit 1
	    ;;
    esac
done
#
init "$cmd"
setup "$cmd"
if [[ -z $cmd ]]; then
    echo "%% *Error* - Missing meeting type or recording"
    help
fi
do$cmd "$rptType"
#
msg "Elapsed time: $SECONDS"
